
grandoliv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006444  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006608  08006608  00016608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006650  08006650  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  08006650  08006650  00016650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006658  08006658  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006658  08006658  00016658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800665c  0800665c  0001665c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08006660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a4c  20000114  08006774  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b60  08006774  00020b60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001383a  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cfc  00000000  00000000  0003397e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  00036680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a60  00000000  00000000  00037238  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d37  00000000  00000000  00037c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d4a2  00000000  00000000  0005b9cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9436  00000000  00000000  00068e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001322a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e30  00000000  00000000  00132324  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000114 	.word	0x20000114
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080065f0 	.word	0x080065f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000118 	.word	0x20000118
 8000200:	080065f0 	.word	0x080065f0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 f9f6 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f806 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f890 	bl	8000634 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000514:	f005 fbb8 	bl	8005c88 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x14>
	...

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b0ac      	sub	sp, #176	; 0xb0
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000526:	2234      	movs	r2, #52	; 0x34
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f006 f858 	bl	80065e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	225c      	movs	r2, #92	; 0x5c
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f006 f849 	bl	80065e0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b36      	ldr	r3, [pc, #216]	; (800062c <SystemClock_Config+0x110>)
 8000554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000556:	4a35      	ldr	r2, [pc, #212]	; (800062c <SystemClock_Config+0x110>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055c:	6413      	str	r3, [r2, #64]	; 0x40
 800055e:	4b33      	ldr	r3, [pc, #204]	; (800062c <SystemClock_Config+0x110>)
 8000560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b30      	ldr	r3, [pc, #192]	; (8000630 <SystemClock_Config+0x114>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000576:	4a2e      	ldr	r2, [pc, #184]	; (8000630 <SystemClock_Config+0x114>)
 8000578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <SystemClock_Config+0x114>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058a:	2302      	movs	r3, #2
 800058c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005a6:	2310      	movs	r3, #16
 80005a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fc40 	bl	8002e50 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005d6:	f000 f847 	bl	8000668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2302      	movs	r3, #2
 80005e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005f4:	2102      	movs	r1, #2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fe6e 	bl	80022d8 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000602:	f000 f831 	bl	8000668 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800060c:	2300      	movs	r3, #0
 800060e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4618      	mov	r0, r3
 8000616:	f001 ff51 	bl	80024bc <HAL_RCCEx_PeriphCLKConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000620:	f000 f822 	bl	8000668 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	37b0      	adds	r7, #176	; 0xb0
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_GPIO_Init+0x30>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <MX_GPIO_Init+0x30>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_GPIO_Init+0x30>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <HAL_MspInit+0x4c>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000686:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <HAL_MspInit+0x4c>)
 8000688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068c:	6453      	str	r3, [r2, #68]	; 0x44
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <HAL_MspInit+0x4c>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_MspInit+0x4c>)
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <HAL_MspInit+0x4c>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	6413      	str	r3, [r2, #64]	; 0x40
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_MspInit+0x4c>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006b6:	2007      	movs	r0, #7
 80006b8:	f000 fa82 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071c:	f000 f93e 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <OTG_FS_IRQHandler+0x10>)
 800072a:	f000 fd74 	bl	8001216 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000758 	.word	0x20000758

08000738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <SystemInit+0x28>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a07      	ldr	r2, [pc, #28]	; (8000760 <SystemInit+0x28>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <SystemInit+0x28>)
 800074e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000752:	609a      	str	r2, [r3, #8]
#endif
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <MIDI_DataRx>:
  MIDI_DataRx,
  MIDI_DataTx
};
 
static uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	807b      	strh	r3, [r7, #2]
  uint8_t chan = msg[1] & 0xf;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3301      	adds	r3, #1
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	f003 030f 	and.w	r3, r3, #15
 800077a:	73fb      	strb	r3, [r7, #15]
  uint8_t msgtype = msg[1] & 0xf0;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3301      	adds	r3, #1
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	f023 030f 	bic.w	r3, r3, #15
 8000786:	73bb      	strb	r3, [r7, #14]
  uint8_t b1 =  msg[2];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	789b      	ldrb	r3, [r3, #2]
 800078c:	737b      	strb	r3, [r7, #13]
  uint8_t b2 =  msg[3];
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	78db      	ldrb	r3, [r3, #3]
 8000792:	733b      	strb	r3, [r7, #12]
  uint16_t b = ((b2 & 0x7f) << 7) | (b1 & 0x7f);
 8000794:	7b3b      	ldrb	r3, [r7, #12]
 8000796:	01db      	lsls	r3, r3, #7
 8000798:	b21b      	sxth	r3, r3
 800079a:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 800079e:	b21a      	sxth	r2, r3
 80007a0:	7b7b      	ldrb	r3, [r7, #13]
 80007a2:	b21b      	sxth	r3, r3
 80007a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	817b      	strh	r3, [r7, #10]
 
  switch (msgtype)
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	2bb0      	cmp	r3, #176	; 0xb0
 80007b4:	d013      	beq.n	80007de <MIDI_DataRx+0x7a>
 80007b6:	2bb0      	cmp	r3, #176	; 0xb0
 80007b8:	dc05      	bgt.n	80007c6 <MIDI_DataRx+0x62>
 80007ba:	2b90      	cmp	r3, #144	; 0x90
 80007bc:	d02f      	beq.n	800081e <MIDI_DataRx+0xba>
 80007be:	2ba0      	cmp	r3, #160	; 0xa0
 80007c0:	d02f      	beq.n	8000822 <MIDI_DataRx+0xbe>
 80007c2:	2b80      	cmp	r3, #128	; 0x80
		case 0x80:
					//key = b1;
					//velocity = b2;
					//notepos = key - 8 + transpose;
					//stop_note(notepos);
          break;
 80007c4:	e032      	b.n	800082c <MIDI_DataRx+0xc8>
  switch (msgtype)
 80007c6:	2bd0      	cmp	r3, #208	; 0xd0
 80007c8:	d02d      	beq.n	8000826 <MIDI_DataRx+0xc2>
 80007ca:	2bd0      	cmp	r3, #208	; 0xd0
 80007cc:	dc02      	bgt.n	80007d4 <MIDI_DataRx+0x70>
 80007ce:	2bc0      	cmp	r3, #192	; 0xc0
 80007d0:	d013      	beq.n	80007fa <MIDI_DataRx+0x96>
 80007d2:	e02b      	b.n	800082c <MIDI_DataRx+0xc8>
 80007d4:	2be0      	cmp	r3, #224	; 0xe0
 80007d6:	d014      	beq.n	8000802 <MIDI_DataRx+0x9e>
 80007d8:	2bf0      	cmp	r3, #240	; 0xf0
 80007da:	d016      	beq.n	800080a <MIDI_DataRx+0xa6>
 80007dc:	e026      	b.n	800082c <MIDI_DataRx+0xc8>
					}
          break;
		case 0xA0:
          break;
		case 0xB0:
					ctrl = b1;
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <MIDI_DataRx+0xd8>)
 80007e0:	7b7b      	ldrb	r3, [r7, #13]
 80007e2:	7013      	strb	r3, [r2, #0]
					data = b2;
 80007e4:	4a16      	ldr	r2, [pc, #88]	; (8000840 <MIDI_DataRx+0xdc>)
 80007e6:	7b3b      	ldrb	r3, [r7, #12]
 80007e8:	7013      	strb	r3, [r2, #0]
		switch(ctrl)
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MIDI_DataRx+0xd8>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d001      	beq.n	80007f6 <MIDI_DataRx+0x92>
 80007f2:	2b40      	cmp	r3, #64	; 0x40
						case (1): // Modulation Wheel
							//mod = data;
							break;
						case (64): // Sustain pedal controller
							//sus = data;
							break;
 80007f4:	e000      	b.n	80007f8 <MIDI_DataRx+0x94>
							break;
 80007f6:	bf00      	nop
					}
          break;
 80007f8:	e018      	b.n	800082c <MIDI_DataRx+0xc8>
		case 0xC0:
					data = b1;
 80007fa:	4a11      	ldr	r2, [pc, #68]	; (8000840 <MIDI_DataRx+0xdc>)
 80007fc:	7b7b      	ldrb	r3, [r7, #13]
 80007fe:	7013      	strb	r3, [r2, #0]
          break;
 8000800:	e014      	b.n	800082c <MIDI_DataRx+0xc8>
		case 0xD0:
          break;
		case 0xE0:
          data = b2;
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <MIDI_DataRx+0xdc>)
 8000804:	7b3b      	ldrb	r3, [r7, #12]
 8000806:	7013      	strb	r3, [r2, #0]
					//bend = data;
					break;
 8000808:	e010      	b.n	800082c <MIDI_DataRx+0xc8>
		case 0xF0:
					if(chan == 0x07)break;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	2b07      	cmp	r3, #7
 800080e:	d00c      	beq.n	800082a <MIDI_DataRx+0xc6>
					ctrl = b1;
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <MIDI_DataRx+0xd8>)
 8000812:	7b7b      	ldrb	r3, [r7, #13]
 8000814:	7013      	strb	r3, [r2, #0]
					data = b2;
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <MIDI_DataRx+0xdc>)
 8000818:	7b3b      	ldrb	r3, [r7, #12]
 800081a:	7013      	strb	r3, [r2, #0]
							break;
						case (64): // Sustain pedal controller
							sus = data;
							break;
					}*/
          break;
 800081c:	e006      	b.n	800082c <MIDI_DataRx+0xc8>
          break;
 800081e:	bf00      	nop
 8000820:	e004      	b.n	800082c <MIDI_DataRx+0xc8>
          break;
 8000822:	bf00      	nop
 8000824:	e002      	b.n	800082c <MIDI_DataRx+0xc8>
          break;
 8000826:	bf00      	nop
 8000828:	e000      	b.n	800082c <MIDI_DataRx+0xc8>
					if(chan == 0x07)break;
 800082a:	bf00      	nop
  }
	return 0;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	2000013a 	.word	0x2000013a
 8000840:	2000013d 	.word	0x2000013d

08000844 <MIDI_DataTx>:

static uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 8000854:	e017      	b.n	8000886 <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	441a      	add	r2, r3
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MIDI_DataTx+0x58>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	7811      	ldrb	r1, [r2, #0]
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <MIDI_DataTx+0x5c>)
 8000864:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MIDI_DataTx+0x58>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	4a0b      	ldr	r2, [pc, #44]	; (800089c <MIDI_DataTx+0x58>)
 800086e:	6013      	str	r3, [r2, #0]
    i++;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	3301      	adds	r3, #1
 8000874:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MIDI_DataTx+0x58>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800087e:	d102      	bne.n	8000886 <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MIDI_DataTx+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
  while (i < length) {
 8000886:	887b      	ldrh	r3, [r7, #2]
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	429a      	cmp	r2, r3
 800088c:	d3e3      	bcc.n	8000856 <MIDI_DataTx+0x12>
    }
  }
  return USBD_OK;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	20000134 	.word	0x20000134
 80008a0:	20000188 	.word	0x20000188

080008a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008aa:	e003      	b.n	80008b4 <LoopCopyDataInit>

080008ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008b2:	3104      	adds	r1, #4

080008b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008bc:	d3f6      	bcc.n	80008ac <CopyDataInit>
  ldr  r2, =_sbss
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008c0:	e002      	b.n	80008c8 <LoopFillZerobss>

080008c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008c4:	f842 3b04 	str.w	r3, [r2], #4

080008c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008cc:	d3f9      	bcc.n	80008c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008ce:	f7ff ff33 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d2:	f005 fe61 	bl	8006598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fe15 	bl	8000504 <main>
  bx  lr    
 80008da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008e0:	08006660 	.word	0x08006660
  ldr  r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008e8:	20000114 	.word	0x20000114
  ldr  r2, =_sbss
 80008ec:	20000114 	.word	0x20000114
  ldr  r3, = _ebss
 80008f0:	20000b60 	.word	0x20000b60

080008f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <HAL_Init+0x40>)
 8000902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <HAL_Init+0x40>)
 800090e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_Init+0x40>)
 800091a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800091e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f94d 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	2000      	movs	r0, #0
 8000928:	f000 f808 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff fea4 	bl	8000678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023c00 	.word	0x40023c00

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_InitTick+0x54>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0x58>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f965 	bl	8000c2a <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e00e      	b.n	8000988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d80a      	bhi.n	8000986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f000 f92d 	bl	8000bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <HAL_InitTick+0x5c>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000000 	.word	0x20000000
 8000994:	20000010 	.word	0x20000010
 8000998:	2000000c 	.word	0x2000000c

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000010 	.word	0x20000010
 80009c0:	20000144 	.word	0x20000144

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000144 	.word	0x20000144

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff ffee 	bl	80009c4 <HAL_GetTick>
 80009e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f4:	d005      	beq.n	8000a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_Delay+0x40>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a02:	bf00      	nop
 8000a04:	f7ff ffde 	bl	80009c4 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8f7      	bhi.n	8000a04 <HAL_Delay+0x28>
  {
  }
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000010 	.word	0x20000010

08000a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a52:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	60d3      	str	r3, [r2, #12]
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <__NVIC_GetPriorityGrouping+0x18>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	f003 0307 	and.w	r3, r3, #7
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	db0b      	blt.n	8000aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f003 021f 	and.w	r2, r3, #31
 8000a9c:	4907      	ldr	r1, [pc, #28]	; (8000abc <__NVIC_EnableIRQ+0x38>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b8c:	d301      	bcc.n	8000b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00f      	b.n	8000bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <SysTick_Config+0x40>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f7ff ff8e 	bl	8000ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x40>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ff29 	bl	8000a20 <__NVIC_SetPriorityGrouping>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be8:	f7ff ff3e 	bl	8000a68 <__NVIC_GetPriorityGrouping>
 8000bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	6978      	ldr	r0, [r7, #20]
 8000bf4:	f7ff ff8e 	bl	8000b14 <NVIC_EncodePriority>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff5d 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff31 	bl	8000a84 <__NVIC_EnableIRQ>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ffa2 	bl	8000b7c <SysTick_Config>
 8000c38:	4603      	mov	r3, r0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
 8000c5e:	e165      	b.n	8000f2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c60:	2201      	movs	r2, #1
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	f040 8154 	bne.w	8000f26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d00b      	beq.n	8000c9e <HAL_GPIO_Init+0x5a>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d007      	beq.n	8000c9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c92:	2b11      	cmp	r3, #17
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b12      	cmp	r3, #18
 8000c9c:	d130      	bne.n	8000d00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	091b      	lsrs	r3, r3, #4
 8000cea:	f003 0201 	and.w	r2, r3, #1
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0xfc>
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b12      	cmp	r3, #18
 8000d3e:	d123      	bne.n	8000d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	08da      	lsrs	r2, r3, #3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3208      	adds	r2, #8
 8000d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	f003 0307 	and.w	r3, r3, #7
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	220f      	movs	r2, #15
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	691a      	ldr	r2, [r3, #16]
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	08da      	lsrs	r2, r3, #3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3208      	adds	r2, #8
 8000d82:	69b9      	ldr	r1, [r7, #24]
 8000d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0203 	and.w	r2, r3, #3
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 80ae 	beq.w	8000f26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b5c      	ldr	r3, [pc, #368]	; (8000f40 <HAL_GPIO_Init+0x2fc>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a5b      	ldr	r2, [pc, #364]	; (8000f40 <HAL_GPIO_Init+0x2fc>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b59      	ldr	r3, [pc, #356]	; (8000f40 <HAL_GPIO_Init+0x2fc>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000de6:	4a57      	ldr	r2, [pc, #348]	; (8000f44 <HAL_GPIO_Init+0x300>)
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	3302      	adds	r3, #2
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4e      	ldr	r2, [pc, #312]	; (8000f48 <HAL_GPIO_Init+0x304>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d025      	beq.n	8000e5e <HAL_GPIO_Init+0x21a>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4d      	ldr	r2, [pc, #308]	; (8000f4c <HAL_GPIO_Init+0x308>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d01f      	beq.n	8000e5a <HAL_GPIO_Init+0x216>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4c      	ldr	r2, [pc, #304]	; (8000f50 <HAL_GPIO_Init+0x30c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d019      	beq.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4b      	ldr	r2, [pc, #300]	; (8000f54 <HAL_GPIO_Init+0x310>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d013      	beq.n	8000e52 <HAL_GPIO_Init+0x20e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4a      	ldr	r2, [pc, #296]	; (8000f58 <HAL_GPIO_Init+0x314>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d00d      	beq.n	8000e4e <HAL_GPIO_Init+0x20a>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a49      	ldr	r2, [pc, #292]	; (8000f5c <HAL_GPIO_Init+0x318>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d007      	beq.n	8000e4a <HAL_GPIO_Init+0x206>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a48      	ldr	r2, [pc, #288]	; (8000f60 <HAL_GPIO_Init+0x31c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d101      	bne.n	8000e46 <HAL_GPIO_Init+0x202>
 8000e42:	2306      	movs	r3, #6
 8000e44:	e00c      	b.n	8000e60 <HAL_GPIO_Init+0x21c>
 8000e46:	2307      	movs	r3, #7
 8000e48:	e00a      	b.n	8000e60 <HAL_GPIO_Init+0x21c>
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	e008      	b.n	8000e60 <HAL_GPIO_Init+0x21c>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	e006      	b.n	8000e60 <HAL_GPIO_Init+0x21c>
 8000e52:	2303      	movs	r3, #3
 8000e54:	e004      	b.n	8000e60 <HAL_GPIO_Init+0x21c>
 8000e56:	2302      	movs	r3, #2
 8000e58:	e002      	b.n	8000e60 <HAL_GPIO_Init+0x21c>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e000      	b.n	8000e60 <HAL_GPIO_Init+0x21c>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	f002 0203 	and.w	r2, r2, #3
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	4093      	lsls	r3, r2
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e70:	4934      	ldr	r1, [pc, #208]	; (8000f44 <HAL_GPIO_Init+0x300>)
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	089b      	lsrs	r3, r3, #2
 8000e76:	3302      	adds	r3, #2
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e7e:	4b39      	ldr	r3, [pc, #228]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea2:	4a30      	ldr	r2, [pc, #192]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ea8:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ecc:	4a25      	ldr	r2, [pc, #148]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed2:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ef6:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f20:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	2b0f      	cmp	r3, #15
 8000f30:	f67f ae96 	bls.w	8000c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f34:	bf00      	nop
 8000f36:	3724      	adds	r7, #36	; 0x24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40013800 	.word	0x40013800
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020c00 	.word	0x40020c00
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40021400 	.word	0x40021400
 8000f60:	40021800 	.word	0x40021800
 8000f64:	40013c00 	.word	0x40013c00

08000f68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	b08f      	sub	sp, #60	; 0x3c
 8000f6c:	af0a      	add	r7, sp, #40	; 0x28
 8000f6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e116      	b.n	80011a8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d106      	bne.n	8000f9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f004 ffc7 	bl	8005f28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 fab8 	bl	800352e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	687e      	ldr	r6, [r7, #4]
 8000fc6:	466d      	mov	r5, sp
 8000fc8:	f106 0410 	add.w	r4, r6, #16
 8000fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fdc:	1d33      	adds	r3, r6, #4
 8000fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fe0:	6838      	ldr	r0, [r7, #0]
 8000fe2:	f002 f98f 	bl	8003304 <USB_CoreInit>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2202      	movs	r2, #2
 8000ff0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e0d7      	b.n	80011a8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 faa6 	bl	8003550 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	e04a      	b.n	80010a0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	333d      	adds	r3, #61	; 0x3d
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	1a9b      	subs	r3, r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	333c      	adds	r3, #60	; 0x3c
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	b298      	uxth	r0, r3
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	3342      	adds	r3, #66	; 0x42
 8001046:	4602      	mov	r2, r0
 8001048:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	333f      	adds	r3, #63	; 0x3f
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	1a9b      	subs	r3, r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	3344      	adds	r3, #68	; 0x44
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001072:	7bfa      	ldrb	r2, [r7, #15]
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	1a9b      	subs	r3, r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	440b      	add	r3, r1
 8001080:	3348      	adds	r3, #72	; 0x48
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	3350      	adds	r3, #80	; 0x50
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	3301      	adds	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d3af      	bcc.n	800100a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
 80010ae:	e044      	b.n	800113a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	1a9b      	subs	r3, r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	1a9b      	subs	r3, r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	1a9b      	subs	r3, r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	3301      	adds	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	429a      	cmp	r2, r3
 8001142:	d3b5      	bcc.n	80010b0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	687e      	ldr	r6, [r7, #4]
 800114c:	466d      	mov	r5, sp
 800114e:	f106 0410 	add.w	r4, r6, #16
 8001152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800115a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800115e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001162:	1d33      	adds	r3, r6, #4
 8001164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001166:	6838      	ldr	r0, [r7, #0]
 8001168:	f002 fa1c 	bl	80035a4 <USB_DevInit>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2202      	movs	r2, #2
 8001176:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e014      	b.n	80011a8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	2b01      	cmp	r3, #1
 8001194:	d102      	bne.n	800119c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f001 f87a 	bl	8002290 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 fa4e 	bl	8004642 <USB_DevDisconnect>

  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d101      	bne.n	80011cc <HAL_PCD_Start+0x1c>
 80011c8:	2302      	movs	r3, #2
 80011ca:	e020      	b.n	800120e <HAL_PCD_Start+0x5e>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d109      	bne.n	80011f0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d005      	beq.n	80011f0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 fa0c 	bl	8004612 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 f984 	bl	800350c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001216:	b590      	push	{r4, r7, lr}
 8001218:	b08d      	sub	sp, #52	; 0x34
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f003 fab3 	bl	8004798 <USB_GetMode>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	f040 83ca 	bne.w	80019ce <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f003 fa17 	bl	8004672 <USB_ReadInterrupts>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 83c0 	beq.w	80019cc <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fa0e 	bl	8004672 <USB_ReadInterrupts>
 8001256:	4603      	mov	r3, r0
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b02      	cmp	r3, #2
 800125e:	d107      	bne.n	8001270 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f002 0202 	and.w	r2, r2, #2
 800126e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f003 f9fc 	bl	8004672 <USB_ReadInterrupts>
 800127a:	4603      	mov	r3, r0
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	2b10      	cmp	r3, #16
 8001282:	d161      	bne.n	8001348 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	699a      	ldr	r2, [r3, #24]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0210 	bic.w	r2, r2, #16
 8001292:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	f003 020f 	and.w	r2, r3, #15
 80012a0:	4613      	mov	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	1a9b      	subs	r3, r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	3304      	adds	r3, #4
 80012b2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	0c5b      	lsrs	r3, r3, #17
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d124      	bne.n	800130a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d035      	beq.n	8001338 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012da:	b29b      	uxth	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	6a38      	ldr	r0, [r7, #32]
 80012e0:	f003 f874 	bl	80043cc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f0:	441a      	add	r2, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001302:	441a      	add	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	619a      	str	r2, [r3, #24]
 8001308:	e016      	b.n	8001338 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	0c5b      	lsrs	r3, r3, #17
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	2b06      	cmp	r3, #6
 8001314:	d110      	bne.n	8001338 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800131c:	2208      	movs	r2, #8
 800131e:	4619      	mov	r1, r3
 8001320:	6a38      	ldr	r0, [r7, #32]
 8001322:	f003 f853 	bl	80043cc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	699a      	ldr	r2, [r3, #24]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001332:	441a      	add	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	699a      	ldr	r2, [r3, #24]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0210 	orr.w	r2, r2, #16
 8001346:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f003 f990 	bl	8004672 <USB_ReadInterrupts>
 8001352:	4603      	mov	r3, r0
 8001354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001358:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800135c:	d16e      	bne.n	800143c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f003 f996 	bl	8004698 <USB_ReadDevAllOutEpInterrupt>
 800136c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800136e:	e062      	b.n	8001436 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d057      	beq.n	800142a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f003 f9bb 	bl	8004700 <USB_ReadDevOutEPInterrupt>
 800138a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00c      	beq.n	80013b0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	015a      	lsls	r2, r3, #5
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	4413      	add	r3, r2
 800139e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013a2:	461a      	mov	r2, r3
 80013a4:	2301      	movs	r3, #1
 80013a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fdc6 	bl	8001f3c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00c      	beq.n	80013d4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	015a      	lsls	r2, r3, #5
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	4413      	add	r3, r2
 80013c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013c6:	461a      	mov	r2, r3
 80013c8:	2308      	movs	r3, #8
 80013ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 fec0 	bl	8002154 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d008      	beq.n	80013f0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	015a      	lsls	r2, r3, #5
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	4413      	add	r3, r2
 80013e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ea:	461a      	mov	r2, r3
 80013ec:	2310      	movs	r3, #16
 80013ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f003 0320 	and.w	r3, r3, #32
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d008      	beq.n	800140c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	015a      	lsls	r2, r3, #5
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	4413      	add	r3, r2
 8001402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001406:	461a      	mov	r2, r3
 8001408:	2320      	movs	r3, #32
 800140a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d009      	beq.n	800142a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	015a      	lsls	r2, r3, #5
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4413      	add	r3, r2
 800141e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001422:	461a      	mov	r2, r3
 8001424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001428:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	3301      	adds	r3, #1
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001432:	085b      	lsrs	r3, r3, #1
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001438:	2b00      	cmp	r3, #0
 800143a:	d199      	bne.n	8001370 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f003 f916 	bl	8004672 <USB_ReadInterrupts>
 8001446:	4603      	mov	r3, r0
 8001448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001450:	f040 80c0 	bne.w	80015d4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f003 f937 	bl	80046cc <USB_ReadDevAllInEpInterrupt>
 800145e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001464:	e0b2      	b.n	80015cc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80a7 	beq.w	80015c0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f003 f95d 	bl	800473c <USB_ReadDevInEPInterrupt>
 8001482:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d057      	beq.n	800153e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	2201      	movs	r2, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69f9      	ldr	r1, [r7, #28]
 80014aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014ae:	4013      	ands	r3, r2
 80014b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	015a      	lsls	r2, r3, #5
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014be:	461a      	mov	r2, r3
 80014c0:	2301      	movs	r3, #1
 80014c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d132      	bne.n	8001532 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d0:	4613      	mov	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	1a9b      	subs	r3, r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	3348      	adds	r3, #72	; 0x48
 80014dc:	6819      	ldr	r1, [r3, #0]
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4403      	add	r3, r0
 80014ec:	3344      	adds	r3, #68	; 0x44
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4419      	add	r1, r3
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4403      	add	r3, r0
 8001500:	3348      	adds	r3, #72	; 0x48
 8001502:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	2b00      	cmp	r3, #0
 8001508:	d113      	bne.n	8001532 <HAL_PCD_IRQHandler+0x31c>
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3350      	adds	r3, #80	; 0x50
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d108      	bne.n	8001532 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800152a:	461a      	mov	r2, r3
 800152c:	2101      	movs	r1, #1
 800152e:	f003 f965 	bl	80047fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f004 fd76 	bl	800602a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	015a      	lsls	r2, r3, #5
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	4413      	add	r3, r2
 8001550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001554:	461a      	mov	r2, r3
 8001556:	2308      	movs	r3, #8
 8001558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	015a      	lsls	r2, r3, #5
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	4413      	add	r3, r2
 800156c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001570:	461a      	mov	r2, r3
 8001572:	2310      	movs	r3, #16
 8001574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	015a      	lsls	r2, r3, #5
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	4413      	add	r3, r2
 8001588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800158c:	461a      	mov	r2, r3
 800158e:	2340      	movs	r3, #64	; 0x40
 8001590:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d008      	beq.n	80015ae <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	015a      	lsls	r2, r3, #5
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	4413      	add	r3, r2
 80015a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a8:	461a      	mov	r2, r3
 80015aa:	2302      	movs	r3, #2
 80015ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 fc30 	bl	8001e20 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	3301      	adds	r3, #1
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f47f af49 	bne.w	8001466 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 f84a 	bl	8004672 <USB_ReadInterrupts>
 80015de:	4603      	mov	r3, r0
 80015e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015e8:	d122      	bne.n	8001630 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001604:	2b01      	cmp	r3, #1
 8001606:	d108      	bne.n	800161a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001610:	2100      	movs	r1, #0
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f004 ff46 	bl	80064a4 <HAL_PCDEx_LPM_Callback>
 8001618:	e002      	b.n	8001620 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f004 fd7c 	bl	8006118 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800162e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f003 f81c 	bl	8004672 <USB_ReadInterrupts>
 800163a:	4603      	mov	r3, r0
 800163c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001644:	d112      	bne.n	800166c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b01      	cmp	r3, #1
 8001654:	d102      	bne.n	800165c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f004 fd38 	bl	80060cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800166a:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f002 fffe 	bl	8004672 <USB_ReadInterrupts>
 8001676:	4603      	mov	r3, r0
 8001678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800167c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001680:	d121      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	695a      	ldr	r2, [r3, #20]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001690:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d111      	bne.n	80016c0 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	f003 020f 	and.w	r2, r3, #15
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80016b6:	2101      	movs	r1, #1
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f004 fef3 	bl	80064a4 <HAL_PCDEx_LPM_Callback>
 80016be:	e002      	b.n	80016c6 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f004 fd03 	bl	80060cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 ffd1 	bl	8004672 <USB_ReadInterrupts>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016da:	f040 80c7 	bne.w	800186c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2110      	movs	r1, #16
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 f8b1 	bl	8003860 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001702:	e056      	b.n	80017b2 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	4413      	add	r3, r2
 800170c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001710:	461a      	mov	r2, r3
 8001712:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001716:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171a:	015a      	lsls	r2, r3, #5
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	4413      	add	r3, r2
 8001720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001728:	0151      	lsls	r1, r2, #5
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	440a      	add	r2, r1
 800172e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001732:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001736:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173a:	015a      	lsls	r2, r3, #5
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	4413      	add	r3, r2
 8001740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001748:	0151      	lsls	r1, r2, #5
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	440a      	add	r2, r1
 800174e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001752:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001756:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175a:	015a      	lsls	r2, r3, #5
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	4413      	add	r3, r2
 8001760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001764:	461a      	mov	r2, r3
 8001766:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800176a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176e:	015a      	lsls	r2, r3, #5
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	4413      	add	r3, r2
 8001774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177c:	0151      	lsls	r1, r2, #5
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	440a      	add	r2, r1
 8001782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800178a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178e:	015a      	lsls	r2, r3, #5
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	4413      	add	r3, r2
 8001794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179c:	0151      	lsls	r1, r2, #5
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	440a      	add	r2, r1
 80017a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ae:	3301      	adds	r3, #1
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d3a3      	bcc.n	8001704 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d016      	beq.n	8001806 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e8:	f043 030b 	orr.w	r3, r3, #11
 80017ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017fe:	f043 030b 	orr.w	r3, r3, #11
 8001802:	6453      	str	r3, [r2, #68]	; 0x44
 8001804:	e015      	b.n	8001832 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001818:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800181c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182c:	f043 030b 	orr.w	r3, r3, #11
 8001830:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001840:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001844:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001856:	461a      	mov	r2, r3
 8001858:	f002 ffd0 	bl	80047fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800186a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f002 fefe 	bl	8004672 <USB_ReadInterrupts>
 8001876:	4603      	mov	r3, r0
 8001878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800187c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001880:	d124      	bne.n	80018cc <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f002 ff94 	bl	80047b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f002 f846 	bl	8003922 <USB_GetDevSpeed>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681c      	ldr	r4, [r3, #0]
 80018a2:	f000 fdff 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80018a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	4620      	mov	r0, r4
 80018b2:	f001 fd89 	bl	80033c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f004 fbdf 	bl	800607a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 fece 	bl	8004672 <USB_ReadInterrupts>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d10a      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f004 fbbc 	bl	800605e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f002 0208 	and.w	r2, r2, #8
 80018f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f002 feb9 	bl	8004672 <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800190a:	d10f      	bne.n	800192c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	b2db      	uxtb	r3, r3
 8001914:	4619      	mov	r1, r3
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f004 fc1e 	bl	8006158 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800192a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fe9e 	bl	8004672 <USB_ReadInterrupts>
 8001936:	4603      	mov	r3, r0
 8001938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001940:	d10f      	bne.n	8001962 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4619      	mov	r1, r3
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f004 fbf1 	bl	8006134 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f002 fe83 	bl	8004672 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001976:	d10a      	bne.n	800198e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f004 fbff 	bl	800617c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800198c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fe6d 	bl	8004672 <USB_ReadInterrupts>
 8001998:	4603      	mov	r3, r0
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d115      	bne.n	80019ce <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f004 fbef 	bl	8006198 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	e000      	b.n	80019ce <HAL_PCD_IRQHandler+0x7b8>
      return;
 80019cc:	bf00      	nop
    }
  }
}
 80019ce:	3734      	adds	r7, #52	; 0x34
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd90      	pop	{r4, r7, pc}

080019d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_PCD_SetAddress+0x1a>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e013      	b.n	8001a16 <HAL_PCD_SetAddress+0x42>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fddd 	bl	80045c6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	4608      	mov	r0, r1
 8001a28:	4611      	mov	r1, r2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	70fb      	strb	r3, [r7, #3]
 8001a30:	460b      	mov	r3, r1
 8001a32:	803b      	strh	r3, [r7, #0]
 8001a34:	4613      	mov	r3, r2
 8001a36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	da0f      	bge.n	8001a64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f003 020f 	and.w	r2, r3, #15
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	3338      	adds	r3, #56	; 0x38
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	3304      	adds	r3, #4
 8001a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	705a      	strb	r2, [r3, #1]
 8001a62:	e00f      	b.n	8001a84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	f003 020f 	and.w	r2, r3, #15
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	1a9b      	subs	r3, r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a90:	883a      	ldrh	r2, [r7, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	78ba      	ldrb	r2, [r7, #2]
 8001a9a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	785b      	ldrb	r3, [r3, #1]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d004      	beq.n	8001aae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001aae:	78bb      	ldrb	r3, [r7, #2]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d102      	bne.n	8001aba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_PCD_EP_Open+0xaa>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e00e      	b.n	8001ae6 <HAL_PCD_EP_Open+0xc8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68f9      	ldr	r1, [r7, #12]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f001 ff48 	bl	800396c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	da0f      	bge.n	8001b22 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	f003 020f 	and.w	r2, r3, #15
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	3338      	adds	r3, #56	; 0x38
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	3304      	adds	r3, #4
 8001b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	705a      	strb	r2, [r3, #1]
 8001b20:	e00f      	b.n	8001b42 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	f003 020f 	and.w	r2, r3, #15
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	3304      	adds	r3, #4
 8001b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_PCD_EP_Close+0x6e>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e00e      	b.n	8001b7a <HAL_PCD_EP_Close+0x8c>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f001 ff86 	bl	8003a7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	f003 020f 	and.w	r2, r3, #15
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3304      	adds	r3, #4
 8001baa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d102      	bne.n	8001bde <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bde:	7afb      	ldrb	r3, [r7, #11]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d109      	bne.n	8001bfc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	6979      	ldr	r1, [r7, #20]
 8001bf6:	f002 fa61 	bl	80040bc <USB_EP0StartXfer>
 8001bfa:	e008      	b.n	8001c0e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	6979      	ldr	r1, [r7, #20]
 8001c0a:	f002 f813 	bl	8003c34 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	460b      	mov	r3, r1
 8001c26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	f003 020f 	and.w	r2, r3, #15
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	3338      	adds	r3, #56	; 0x38
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2201      	movs	r2, #1
 8001c56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c58:	7afb      	ldrb	r3, [r7, #11]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d102      	bne.n	8001c72 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c72:	7afb      	ldrb	r3, [r7, #11]
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	6979      	ldr	r1, [r7, #20]
 8001c8a:	f002 fa17 	bl	80040bc <USB_EP0StartXfer>
 8001c8e:	e008      	b.n	8001ca2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	6979      	ldr	r1, [r7, #20]
 8001c9e:	f001 ffc9 	bl	8003c34 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f003 020f 	and.w	r2, r3, #15
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d901      	bls.n	8001cca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e050      	b.n	8001d6c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da0f      	bge.n	8001cf2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	f003 020f 	and.w	r2, r3, #15
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	3338      	adds	r3, #56	; 0x38
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	705a      	strb	r2, [r3, #1]
 8001cf0:	e00d      	b.n	8001d0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cf2:	78fa      	ldrb	r2, [r7, #3]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	3304      	adds	r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2201      	movs	r2, #1
 8001d12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_PCD_EP_SetStall+0x82>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e01e      	b.n	8001d6c <HAL_PCD_EP_SetStall+0xc0>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68f9      	ldr	r1, [r7, #12]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f002 fb6e 	bl	800441e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10a      	bne.n	8001d62 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	b2d9      	uxtb	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f002 fd4d 	bl	80047fc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	f003 020f 	and.w	r2, r3, #15
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d901      	bls.n	8001d92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e042      	b.n	8001e18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	da0f      	bge.n	8001dba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	f003 020f 	and.w	r2, r3, #15
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	3338      	adds	r3, #56	; 0x38
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	3304      	adds	r3, #4
 8001db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2201      	movs	r2, #1
 8001db6:	705a      	strb	r2, [r3, #1]
 8001db8:	e00f      	b.n	8001dda <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	f003 020f 	and.w	r2, r3, #15
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_PCD_EP_ClrStall+0x86>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e00e      	b.n	8001e18 <HAL_PCD_EP_ClrStall+0xa4>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68f9      	ldr	r1, [r7, #12]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f002 fb76 	bl	80044fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	4613      	mov	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	3338      	adds	r3, #56	; 0x38
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	3304      	adds	r3, #4
 8001e46:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	699a      	ldr	r2, [r3, #24]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d901      	bls.n	8001e58 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e06c      	b.n	8001f32 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	695a      	ldr	r2, [r3, #20]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d902      	bls.n	8001e74 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	3303      	adds	r3, #3
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e7c:	e02b      	b.n	8001ed6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d902      	bls.n	8001e9a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3303      	adds	r3, #3
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	68d9      	ldr	r1, [r3, #12]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6978      	ldr	r0, [r7, #20]
 8001eba:	f002 fa52 	bl	8004362 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	441a      	add	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	441a      	add	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d809      	bhi.n	8001f00 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d203      	bcs.n	8001f00 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1be      	bne.n	8001e7e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d811      	bhi.n	8001f30 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	2201      	movs	r2, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	6939      	ldr	r1, [r7, #16]
 8001f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3720      	adds	r7, #32
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	333c      	adds	r3, #60	; 0x3c
 8001f54:	3304      	adds	r3, #4
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	f040 80a0 	bne.w	80020b4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d015      	beq.n	8001faa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4a72      	ldr	r2, [pc, #456]	; (800214c <PCD_EP_OutXfrComplete_int+0x210>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	f240 80dd 	bls.w	8002142 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80d7 	beq.w	8002142 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa6:	6093      	str	r3, [r2, #8]
 8001fa8:	e0cb      	b.n	8002142 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d009      	beq.n	8001fc8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	6093      	str	r3, [r2, #8]
 8001fc6:	e0bc      	b.n	8002142 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 80b7 	bne.w	8002142 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a5d      	ldr	r2, [pc, #372]	; (800214c <PCD_EP_OutXfrComplete_int+0x210>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d90f      	bls.n	8001ffc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff8:	6093      	str	r3, [r2, #8]
 8001ffa:	e0a2      	b.n	8002142 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800200e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	0159      	lsls	r1, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	440b      	add	r3, r1
 8002018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002022:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4403      	add	r3, r0
 8002032:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002036:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800204a:	6819      	ldr	r1, [r3, #0]
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4403      	add	r3, r0
 800205a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4419      	add	r1, r3
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4403      	add	r3, r0
 8002070:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002074:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d114      	bne.n	80020a6 <PCD_EP_OutXfrComplete_int+0x16a>
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d108      	bne.n	80020a6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800209e:	461a      	mov	r2, r3
 80020a0:	2101      	movs	r1, #1
 80020a2:	f002 fbab 	bl	80047fc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	4619      	mov	r1, r3
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f003 ffa1 	bl	8005ff4 <HAL_PCD_DataOutStageCallback>
 80020b2:	e046      	b.n	8002142 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a26      	ldr	r2, [pc, #152]	; (8002150 <PCD_EP_OutXfrComplete_int+0x214>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d124      	bne.n	8002106 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d2:	461a      	mov	r2, r3
 80020d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020d8:	6093      	str	r3, [r2, #8]
 80020da:	e032      	b.n	8002142 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f2:	461a      	mov	r2, r3
 80020f4:	2320      	movs	r3, #32
 80020f6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	4619      	mov	r1, r3
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f003 ff78 	bl	8005ff4 <HAL_PCD_DataOutStageCallback>
 8002104:	e01d      	b.n	8002142 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d114      	bne.n	8002136 <PCD_EP_OutXfrComplete_int+0x1fa>
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d108      	bne.n	8002136 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800212e:	461a      	mov	r2, r3
 8002130:	2100      	movs	r1, #0
 8002132:	f002 fb63 	bl	80047fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f003 ff59 	bl	8005ff4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	4f54300a 	.word	0x4f54300a
 8002150:	4f54310a 	.word	0x4f54310a

08002154 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	333c      	adds	r3, #60	; 0x3c
 800216c:	3304      	adds	r3, #4
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4a15      	ldr	r2, [pc, #84]	; (80021dc <PCD_EP_OutSetupPacket_int+0x88>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d90e      	bls.n	80021a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002190:	2b00      	cmp	r3, #0
 8002192:	d009      	beq.n	80021a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a0:	461a      	mov	r2, r3
 80021a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f003 ff11 	bl	8005fd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <PCD_EP_OutSetupPacket_int+0x88>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d90c      	bls.n	80021d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d108      	bne.n	80021d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021c8:	461a      	mov	r2, r3
 80021ca:	2101      	movs	r1, #1
 80021cc:	f002 fb16 	bl	80047fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	4f54300a 	.word	0x4f54300a

080021e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	70fb      	strb	r3, [r7, #3]
 80021ec:	4613      	mov	r3, r2
 80021ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d107      	bne.n	800220e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021fe:	883b      	ldrh	r3, [r7, #0]
 8002200:	0419      	lsls	r1, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	430a      	orrs	r2, r1
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
 800220c:	e028      	b.n	8002260 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	4413      	add	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	e00d      	b.n	800223e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	3340      	adds	r3, #64	; 0x40
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	0c1b      	lsrs	r3, r3, #16
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	4413      	add	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	3301      	adds	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	3b01      	subs	r3, #1
 8002244:	429a      	cmp	r2, r3
 8002246:	d3ec      	bcc.n	8002222 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002248:	883b      	ldrh	r3, [r7, #0]
 800224a:	0418      	lsls	r0, r3, #16
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	3b01      	subs	r3, #1
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	4302      	orrs	r2, r0
 8002258:	3340      	adds	r3, #64	; 0x40
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c2:	f043 0303 	orr.w	r3, r3, #3
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0cc      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ec:	4b68      	ldr	r3, [pc, #416]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d90c      	bls.n	8002314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b65      	ldr	r3, [pc, #404]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b63      	ldr	r3, [pc, #396]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0b8      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d020      	beq.n	8002362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800232c:	4b59      	ldr	r3, [pc, #356]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4a58      	ldr	r2, [pc, #352]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002344:	4b53      	ldr	r3, [pc, #332]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a52      	ldr	r2, [pc, #328]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800234e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002350:	4b50      	ldr	r3, [pc, #320]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	494d      	ldr	r1, [pc, #308]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d044      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b47      	ldr	r3, [pc, #284]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d119      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e07f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d003      	beq.n	8002396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002392:	2b03      	cmp	r3, #3
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002396:	4b3f      	ldr	r3, [pc, #252]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e06f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a6:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e067      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b6:	4b37      	ldr	r3, [pc, #220]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f023 0203 	bic.w	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4934      	ldr	r1, [pc, #208]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c8:	f7fe fafc 	bl	80009c4 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d0:	f7fe faf8 	bl	80009c4 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e04f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 020c 	and.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1eb      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f8:	4b25      	ldr	r3, [pc, #148]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d20c      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e032      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4916      	ldr	r1, [pc, #88]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800244a:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	490e      	ldr	r1, [pc, #56]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800245e:	f000 fb57 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 8002462:	4601      	mov	r1, r0
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	5cd3      	ldrb	r3, [r2, r3]
 8002472:	fa21 f303 	lsr.w	r3, r1, r3
 8002476:	4a09      	ldr	r2, [pc, #36]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fa5c 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023c00 	.word	0x40023c00
 8002494:	40023800 	.word	0x40023800
 8002498:	08006640 	.word	0x08006640
 800249c:	20000000 	.word	0x20000000
 80024a0:	2000000c 	.word	0x2000000c

080024a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000000 	.word	0x20000000

080024bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	; 0x30
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d010      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80024f4:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024fa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	496c      	ldr	r1, [pc, #432]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002512:	2301      	movs	r3, #1
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d010      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002522:	4b64      	ldr	r3, [pc, #400]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002528:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002530:	4960      	ldr	r1, [pc, #384]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002540:	2301      	movs	r3, #1
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d017      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002550:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002556:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4955      	ldr	r1, [pc, #340]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800256e:	d101      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002570:	2301      	movs	r3, #1
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800257c:	2301      	movs	r3, #1
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d017      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800258c:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800258e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002592:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259a:	4946      	ldr	r1, [pc, #280]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025aa:	d101      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80025ac:	2301      	movs	r3, #1
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80025b8:	2301      	movs	r3, #1
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 808a 	beq.w	80026de <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a38      	ldr	r2, [pc, #224]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80025e6:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a33      	ldr	r2, [pc, #204]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025f2:	f7fe f9e7 	bl	80009c4 <HAL_GetTick>
 80025f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025fa:	f7fe f9e3 	bl	80009c4 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e278      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800260c:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002618:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002620:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d02f      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002630:	6a3a      	ldr	r2, [r7, #32]
 8002632:	429a      	cmp	r2, r3
 8002634:	d028      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002636:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002646:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800264c:	4a19      	ldr	r2, [pc, #100]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b01      	cmp	r3, #1
 800265c:	d114      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800265e:	f7fe f9b1 	bl	80009c4 <HAL_GetTick>
 8002662:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	e00a      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7fe f9ad 	bl	80009c4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f241 3288 	movw	r2, #5000	; 0x1388
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e240      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ee      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002694:	d114      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80026a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026aa:	4902      	ldr	r1, [pc, #8]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]
 80026b0:	e00c      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40007000 	.word	0x40007000
 80026bc:	42470e40 	.word	0x42470e40
 80026c0:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a49      	ldr	r2, [pc, #292]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026ca:	6093      	str	r3, [r2, #8]
 80026cc:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d8:	4944      	ldr	r1, [pc, #272]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80026f0:	4b3f      	ldr	r3, [pc, #252]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80026f2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002700:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002706:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	4937      	ldr	r1, [pc, #220]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002722:	4b32      	ldr	r3, [pc, #200]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002728:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002730:	492e      	ldr	r1, [pc, #184]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d011      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002744:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	4926      	ldr	r1, [pc, #152]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002762:	d101      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002764:	2301      	movs	r3, #1
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800277a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	491a      	ldr	r1, [pc, #104]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002792:	2b00      	cmp	r3, #0
 8002794:	d011      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a4:	4911      	ldr	r1, [pc, #68]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b4:	d101      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80027b6:	2301      	movs	r3, #1
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d005      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c8:	f040 80ff 	bne.w	80029ca <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027d2:	f7fe f8f7 	bl	80009c4 <HAL_GetTick>
 80027d6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027d8:	e00e      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027da:	f7fe f8f3 	bl	80009c4 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d907      	bls.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e188      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x642>
 80027ec:	40023800 	.word	0x40023800
 80027f0:	424711e0 	.word	0x424711e0
 80027f4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027f8:	4b7e      	ldr	r3, [pc, #504]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1ea      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002820:	2b00      	cmp	r3, #0
 8002822:	d028      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d124      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800282c:	4b71      	ldr	r3, [pc, #452]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800282e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002832:	0c1b      	lsrs	r3, r3, #16
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	3301      	adds	r3, #1
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800283e:	4b6d      	ldr	r3, [pc, #436]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002844:	0e1b      	lsrs	r3, r3, #24
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	019b      	lsls	r3, r3, #6
 8002856:	431a      	orrs	r2, r3
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	3b01      	subs	r3, #1
 800285e:	041b      	lsls	r3, r3, #16
 8002860:	431a      	orrs	r2, r3
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	071b      	lsls	r3, r3, #28
 800286e:	4961      	ldr	r1, [pc, #388]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d004      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800288a:	d00a      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002894:	2b00      	cmp	r3, #0
 8002896:	d035      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a0:	d130      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80028a2:	4b54      	ldr	r3, [pc, #336]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	3301      	adds	r3, #1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028b4:	4b4f      	ldr	r3, [pc, #316]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ba:	0f1b      	lsrs	r3, r3, #28
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	019b      	lsls	r3, r3, #6
 80028cc:	431a      	orrs	r2, r3
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	3b01      	subs	r3, #1
 80028d4:	041b      	lsls	r3, r3, #16
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	431a      	orrs	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	071b      	lsls	r3, r3, #28
 80028e4:	4943      	ldr	r1, [pc, #268]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80028ec:	4b41      	ldr	r3, [pc, #260]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f2:	f023 021f 	bic.w	r2, r3, #31
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	3b01      	subs	r3, #1
 80028fc:	493d      	ldr	r1, [pc, #244]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290c:	2b00      	cmp	r3, #0
 800290e:	d029      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002918:	d124      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800291a:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800291c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	3301      	adds	r3, #1
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800292c:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800292e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002932:	0f1b      	lsrs	r3, r3, #28
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	019b      	lsls	r3, r3, #6
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	085b      	lsrs	r3, r3, #1
 800294c:	3b01      	subs	r3, #1
 800294e:	041b      	lsls	r3, r3, #16
 8002950:	431a      	orrs	r2, r3
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	061b      	lsls	r3, r3, #24
 8002956:	431a      	orrs	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	071b      	lsls	r3, r3, #28
 800295c:	4925      	ldr	r1, [pc, #148]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800296c:	2b00      	cmp	r3, #0
 800296e:	d016      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	019b      	lsls	r3, r3, #6
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	085b      	lsrs	r3, r3, #1
 8002982:	3b01      	subs	r3, #1
 8002984:	041b      	lsls	r3, r3, #16
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	061b      	lsls	r3, r3, #24
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	071b      	lsls	r3, r3, #28
 8002996:	4917      	ldr	r1, [pc, #92]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029a4:	f7fe f80e 	bl	80009c4 <HAL_GetTick>
 80029a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029ac:	f7fe f80a 	bl	80009c4 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e09f      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80029ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	f040 8095 	bne.w	8002afc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029d8:	f7fd fff4 	bl	80009c4 <HAL_GetTick>
 80029dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029de:	e00f      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80029e0:	f7fd fff0 	bl	80009c4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d908      	bls.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e085      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x642>
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800
 80029f8:	42470068 	.word	0x42470068
 80029fc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a00:	4b41      	ldr	r3, [pc, #260]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a0c:	d0e8      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d02b      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d127      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002a36:	4b34      	ldr	r3, [pc, #208]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	3301      	adds	r3, #1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	019b      	lsls	r3, r3, #6
 8002a52:	431a      	orrs	r2, r3
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	041b      	lsls	r3, r3, #16
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	061b      	lsls	r3, r3, #24
 8002a64:	4928      	ldr	r1, [pc, #160]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a6c:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a72:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	4922      	ldr	r1, [pc, #136]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01d      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a9a:	d118      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a9c:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	0e1b      	lsrs	r3, r3, #24
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	019b      	lsls	r3, r3, #6
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	3b01      	subs	r3, #1
 8002abe:	041b      	lsls	r3, r3, #16
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	4910      	ldr	r1, [pc, #64]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ad4:	f7fd ff76 	bl	80009c4 <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002adc:	f7fd ff72 	bl	80009c4 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e007      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002afa:	d1ef      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3730      	adds	r7, #48	; 0x30
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	42470070 	.word	0x42470070

08002b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b2a:	4bc6      	ldr	r3, [pc, #792]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b0c      	cmp	r3, #12
 8002b34:	f200 817e 	bhi.w	8002e34 <HAL_RCC_GetSysClockFreq+0x324>
 8002b38:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <HAL_RCC_GetSysClockFreq+0x30>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b75 	.word	0x08002b75
 8002b44:	08002e35 	.word	0x08002e35
 8002b48:	08002e35 	.word	0x08002e35
 8002b4c:	08002e35 	.word	0x08002e35
 8002b50:	08002b7b 	.word	0x08002b7b
 8002b54:	08002e35 	.word	0x08002e35
 8002b58:	08002e35 	.word	0x08002e35
 8002b5c:	08002e35 	.word	0x08002e35
 8002b60:	08002b81 	.word	0x08002b81
 8002b64:	08002e35 	.word	0x08002e35
 8002b68:	08002e35 	.word	0x08002e35
 8002b6c:	08002e35 	.word	0x08002e35
 8002b70:	08002cdd 	.word	0x08002cdd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b74:	4bb4      	ldr	r3, [pc, #720]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x338>)
 8002b76:	613b      	str	r3, [r7, #16]
       break;
 8002b78:	e15f      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b7a:	4bb4      	ldr	r3, [pc, #720]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x33c>)
 8002b7c:	613b      	str	r3, [r7, #16]
      break;
 8002b7e:	e15c      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b80:	4bb0      	ldr	r3, [pc, #704]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b88:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8a:	4bae      	ldr	r3, [pc, #696]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d04a      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b96:	4bab      	ldr	r3, [pc, #684]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	099b      	lsrs	r3, r3, #6
 8002b9c:	f04f 0400 	mov.w	r4, #0
 8002ba0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	ea03 0501 	and.w	r5, r3, r1
 8002bac:	ea04 0602 	and.w	r6, r4, r2
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	4632      	mov	r2, r6
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	f04f 0400 	mov.w	r4, #0
 8002bbc:	0154      	lsls	r4, r2, #5
 8002bbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bc2:	014b      	lsls	r3, r1, #5
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	1b49      	subs	r1, r1, r5
 8002bca:	eb62 0206 	sbc.w	r2, r2, r6
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f04f 0400 	mov.w	r4, #0
 8002bd6:	0194      	lsls	r4, r2, #6
 8002bd8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bdc:	018b      	lsls	r3, r1, #6
 8002bde:	1a5b      	subs	r3, r3, r1
 8002be0:	eb64 0402 	sbc.w	r4, r4, r2
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	00e2      	lsls	r2, r4, #3
 8002bee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bf2:	00d9      	lsls	r1, r3, #3
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4614      	mov	r4, r2
 8002bf8:	195b      	adds	r3, r3, r5
 8002bfa:	eb44 0406 	adc.w	r4, r4, r6
 8002bfe:	f04f 0100 	mov.w	r1, #0
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	0262      	lsls	r2, r4, #9
 8002c08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c0c:	0259      	lsls	r1, r3, #9
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4614      	mov	r4, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	4621      	mov	r1, r4
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f04f 0400 	mov.w	r4, #0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4623      	mov	r3, r4
 8002c20:	f7fd faf0 	bl	8000204 <__aeabi_uldivmod>
 8002c24:	4603      	mov	r3, r0
 8002c26:	460c      	mov	r4, r1
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	e049      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2c:	4b85      	ldr	r3, [pc, #532]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	f04f 0400 	mov.w	r4, #0
 8002c36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	ea03 0501 	and.w	r5, r3, r1
 8002c42:	ea04 0602 	and.w	r6, r4, r2
 8002c46:	4629      	mov	r1, r5
 8002c48:	4632      	mov	r2, r6
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	f04f 0400 	mov.w	r4, #0
 8002c52:	0154      	lsls	r4, r2, #5
 8002c54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c58:	014b      	lsls	r3, r1, #5
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4622      	mov	r2, r4
 8002c5e:	1b49      	subs	r1, r1, r5
 8002c60:	eb62 0206 	sbc.w	r2, r2, r6
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	f04f 0400 	mov.w	r4, #0
 8002c6c:	0194      	lsls	r4, r2, #6
 8002c6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c72:	018b      	lsls	r3, r1, #6
 8002c74:	1a5b      	subs	r3, r3, r1
 8002c76:	eb64 0402 	sbc.w	r4, r4, r2
 8002c7a:	f04f 0100 	mov.w	r1, #0
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	00e2      	lsls	r2, r4, #3
 8002c84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c88:	00d9      	lsls	r1, r3, #3
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	195b      	adds	r3, r3, r5
 8002c90:	eb44 0406 	adc.w	r4, r4, r6
 8002c94:	f04f 0100 	mov.w	r1, #0
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	02a2      	lsls	r2, r4, #10
 8002c9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ca2:	0299      	lsls	r1, r3, #10
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4614      	mov	r4, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	4621      	mov	r1, r4
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f04f 0400 	mov.w	r4, #0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	f7fd faa5 	bl	8000204 <__aeabi_uldivmod>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc0:	4b60      	ldr	r3, [pc, #384]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x334>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	613b      	str	r3, [r7, #16]
      break;
 8002cda:	e0ae      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cdc:	4b59      	ldr	r3, [pc, #356]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x334>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce6:	4b57      	ldr	r3, [pc, #348]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d04a      	beq.n	8002d88 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf2:	4b54      	ldr	r3, [pc, #336]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x334>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	099b      	lsrs	r3, r3, #6
 8002cf8:	f04f 0400 	mov.w	r4, #0
 8002cfc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	ea03 0501 	and.w	r5, r3, r1
 8002d08:	ea04 0602 	and.w	r6, r4, r2
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	4632      	mov	r2, r6
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	f04f 0400 	mov.w	r4, #0
 8002d18:	0154      	lsls	r4, r2, #5
 8002d1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d1e:	014b      	lsls	r3, r1, #5
 8002d20:	4619      	mov	r1, r3
 8002d22:	4622      	mov	r2, r4
 8002d24:	1b49      	subs	r1, r1, r5
 8002d26:	eb62 0206 	sbc.w	r2, r2, r6
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	f04f 0400 	mov.w	r4, #0
 8002d32:	0194      	lsls	r4, r2, #6
 8002d34:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d38:	018b      	lsls	r3, r1, #6
 8002d3a:	1a5b      	subs	r3, r3, r1
 8002d3c:	eb64 0402 	sbc.w	r4, r4, r2
 8002d40:	f04f 0100 	mov.w	r1, #0
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	00e2      	lsls	r2, r4, #3
 8002d4a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d4e:	00d9      	lsls	r1, r3, #3
 8002d50:	460b      	mov	r3, r1
 8002d52:	4614      	mov	r4, r2
 8002d54:	195b      	adds	r3, r3, r5
 8002d56:	eb44 0406 	adc.w	r4, r4, r6
 8002d5a:	f04f 0100 	mov.w	r1, #0
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	0262      	lsls	r2, r4, #9
 8002d64:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d68:	0259      	lsls	r1, r3, #9
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4614      	mov	r4, r2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	4621      	mov	r1, r4
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f04f 0400 	mov.w	r4, #0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	f7fd fa42 	bl	8000204 <__aeabi_uldivmod>
 8002d80:	4603      	mov	r3, r0
 8002d82:	460c      	mov	r4, r1
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e049      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d88:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	099b      	lsrs	r3, r3, #6
 8002d8e:	f04f 0400 	mov.w	r4, #0
 8002d92:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	ea03 0501 	and.w	r5, r3, r1
 8002d9e:	ea04 0602 	and.w	r6, r4, r2
 8002da2:	4629      	mov	r1, r5
 8002da4:	4632      	mov	r2, r6
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	f04f 0400 	mov.w	r4, #0
 8002dae:	0154      	lsls	r4, r2, #5
 8002db0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002db4:	014b      	lsls	r3, r1, #5
 8002db6:	4619      	mov	r1, r3
 8002db8:	4622      	mov	r2, r4
 8002dba:	1b49      	subs	r1, r1, r5
 8002dbc:	eb62 0206 	sbc.w	r2, r2, r6
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	f04f 0400 	mov.w	r4, #0
 8002dc8:	0194      	lsls	r4, r2, #6
 8002dca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dce:	018b      	lsls	r3, r1, #6
 8002dd0:	1a5b      	subs	r3, r3, r1
 8002dd2:	eb64 0402 	sbc.w	r4, r4, r2
 8002dd6:	f04f 0100 	mov.w	r1, #0
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	00e2      	lsls	r2, r4, #3
 8002de0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002de4:	00d9      	lsls	r1, r3, #3
 8002de6:	460b      	mov	r3, r1
 8002de8:	4614      	mov	r4, r2
 8002dea:	195b      	adds	r3, r3, r5
 8002dec:	eb44 0406 	adc.w	r4, r4, r6
 8002df0:	f04f 0100 	mov.w	r1, #0
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	02a2      	lsls	r2, r4, #10
 8002dfa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002dfe:	0299      	lsls	r1, r3, #10
 8002e00:	460b      	mov	r3, r1
 8002e02:	4614      	mov	r4, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	4621      	mov	r1, r4
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f04f 0400 	mov.w	r4, #0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4623      	mov	r3, r4
 8002e12:	f7fd f9f7 	bl	8000204 <__aeabi_uldivmod>
 8002e16:	4603      	mov	r3, r0
 8002e18:	460c      	mov	r4, r1
 8002e1a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e1c:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x334>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	0f1b      	lsrs	r3, r3, #28
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	613b      	str	r3, [r7, #16]
      break;
 8002e32:	e002      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x338>)
 8002e36:	613b      	str	r3, [r7, #16]
      break;
 8002e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3a:	693b      	ldr	r3, [r7, #16]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	00f42400 	.word	0x00f42400
 8002e4c:	007a1200 	.word	0x007a1200

08002e50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8083 	beq.w	8002f70 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e6a:	4b95      	ldr	r3, [pc, #596]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d019      	beq.n	8002eaa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e76:	4b92      	ldr	r3, [pc, #584]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e82:	4b8f      	ldr	r3, [pc, #572]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8e:	d00c      	beq.n	8002eaa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e90:	4b8b      	ldr	r3, [pc, #556]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e98:	2b0c      	cmp	r3, #12
 8002e9a:	d112      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9c:	4b88      	ldr	r3, [pc, #544]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eaa:	4b85      	ldr	r3, [pc, #532]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d05b      	beq.n	8002f6e <HAL_RCC_OscConfig+0x11e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d157      	bne.n	8002f6e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e216      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eca:	d106      	bne.n	8002eda <HAL_RCC_OscConfig+0x8a>
 8002ecc:	4b7c      	ldr	r3, [pc, #496]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a7b      	ldr	r2, [pc, #492]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	e01d      	b.n	8002f16 <HAL_RCC_OscConfig+0xc6>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee2:	d10c      	bne.n	8002efe <HAL_RCC_OscConfig+0xae>
 8002ee4:	4b76      	ldr	r3, [pc, #472]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a75      	ldr	r2, [pc, #468]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002eea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b73      	ldr	r3, [pc, #460]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a72      	ldr	r2, [pc, #456]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	e00b      	b.n	8002f16 <HAL_RCC_OscConfig+0xc6>
 8002efe:	4b70      	ldr	r3, [pc, #448]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a6f      	ldr	r2, [pc, #444]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b6d      	ldr	r3, [pc, #436]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a6c      	ldr	r2, [pc, #432]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d013      	beq.n	8002f46 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1e:	f7fd fd51 	bl	80009c4 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f26:	f7fd fd4d 	bl	80009c4 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b64      	cmp	r3, #100	; 0x64
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e1db      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f38:	4b61      	ldr	r3, [pc, #388]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0xd6>
 8002f44:	e014      	b.n	8002f70 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f46:	f7fd fd3d 	bl	80009c4 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f4e:	f7fd fd39 	bl	80009c4 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b64      	cmp	r3, #100	; 0x64
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e1c7      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f60:	4b57      	ldr	r3, [pc, #348]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f0      	bne.n	8002f4e <HAL_RCC_OscConfig+0xfe>
 8002f6c:	e000      	b.n	8002f70 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d06f      	beq.n	800305c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f7c:	4b50      	ldr	r3, [pc, #320]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d017      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f88:	4b4d      	ldr	r3, [pc, #308]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d105      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f94:	4b4a      	ldr	r3, [pc, #296]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa0:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fa8:	2b0c      	cmp	r3, #12
 8002faa:	d11c      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fac:	4b44      	ldr	r3, [pc, #272]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d116      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb8:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x180>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e18f      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd0:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4938      	ldr	r1, [pc, #224]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe4:	e03a      	b.n	800305c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d020      	beq.n	8003030 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fee:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7fd fce6 	bl	80009c4 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffc:	f7fd fce2 	bl	80009c4 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e170      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301a:	4b29      	ldr	r3, [pc, #164]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4925      	ldr	r1, [pc, #148]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
 800302e:	e015      	b.n	800305c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003030:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fd fcc5 	bl	80009c4 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303e:	f7fd fcc1 	bl	80009c4 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e14f      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d037      	beq.n	80030d8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d016      	beq.n	800309e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003070:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_RCC_OscConfig+0x278>)
 8003072:	2201      	movs	r2, #1
 8003074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003076:	f7fd fca5 	bl	80009c4 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307e:	f7fd fca1 	bl	80009c4 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e12f      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8003092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x22e>
 800309c:	e01c      	b.n	80030d8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_RCC_OscConfig+0x278>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fd fc8e 	bl	80009c4 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030aa:	e00f      	b.n	80030cc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ac:	f7fd fc8a 	bl	80009c4 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d908      	bls.n	80030cc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e118      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
 80030c4:	42470000 	.word	0x42470000
 80030c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	4b8a      	ldr	r3, [pc, #552]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 80030ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e9      	bne.n	80030ac <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8097 	beq.w	8003214 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ea:	4b83      	ldr	r3, [pc, #524]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10f      	bne.n	8003116 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b7f      	ldr	r3, [pc, #508]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a7e      	ldr	r2, [pc, #504]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b7c      	ldr	r3, [pc, #496]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b79      	ldr	r3, [pc, #484]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d118      	bne.n	8003154 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b76      	ldr	r3, [pc, #472]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a75      	ldr	r2, [pc, #468]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312e:	f7fd fc49 	bl	80009c4 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fd fc45 	bl	80009c4 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e0d3      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b6c      	ldr	r3, [pc, #432]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x31a>
 800315c:	4b66      	ldr	r3, [pc, #408]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	4a65      	ldr	r2, [pc, #404]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6713      	str	r3, [r2, #112]	; 0x70
 8003168:	e01c      	b.n	80031a4 <HAL_RCC_OscConfig+0x354>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b05      	cmp	r3, #5
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x33c>
 8003172:	4b61      	ldr	r3, [pc, #388]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	4a60      	ldr	r2, [pc, #384]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	6713      	str	r3, [r2, #112]	; 0x70
 800317e:	4b5e      	ldr	r3, [pc, #376]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a5d      	ldr	r2, [pc, #372]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0x354>
 800318c:	4b5a      	ldr	r3, [pc, #360]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	4a59      	ldr	r2, [pc, #356]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	6713      	str	r3, [r2, #112]	; 0x70
 8003198:	4b57      	ldr	r3, [pc, #348]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	4a56      	ldr	r2, [pc, #344]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 800319e:	f023 0304 	bic.w	r3, r3, #4
 80031a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d015      	beq.n	80031d8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fd fc0a 	bl	80009c4 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fd fc06 	bl	80009c4 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e092      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ca:	4b4b      	ldr	r3, [pc, #300]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0ee      	beq.n	80031b4 <HAL_RCC_OscConfig+0x364>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fd fbf4 	bl	80009c4 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fd fbf0 	bl	80009c4 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e07c      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f6:	4b40      	ldr	r3, [pc, #256]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1ee      	bne.n	80031e0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d105      	bne.n	8003214 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003208:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	4a3a      	ldr	r2, [pc, #232]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 800320e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003212:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d068      	beq.n	80032ee <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321c:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 030c 	and.w	r3, r3, #12
 8003224:	2b08      	cmp	r3, #8
 8003226:	d060      	beq.n	80032ea <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d145      	bne.n	80032bc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003230:	4b33      	ldr	r3, [pc, #204]	; (8003300 <HAL_RCC_OscConfig+0x4b0>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003236:	f7fd fbc5 	bl	80009c4 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323e:	f7fd fbc1 	bl	80009c4 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e04f      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003250:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f0      	bne.n	800323e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	019b      	lsls	r3, r3, #6
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	3b01      	subs	r3, #1
 8003276:	041b      	lsls	r3, r3, #16
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	061b      	lsls	r3, r3, #24
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	071b      	lsls	r3, r3, #28
 8003288:	491b      	ldr	r1, [pc, #108]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800328e:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <HAL_RCC_OscConfig+0x4b0>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fd fb96 	bl	80009c4 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329c:	f7fd fb92 	bl	80009c4 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e020      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ae:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x44c>
 80032ba:	e018      	b.n	80032ee <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032bc:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_RCC_OscConfig+0x4b0>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fd fb7f 	bl	80009c4 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fd fb7b 	bl	80009c4 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e009      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_RCC_OscConfig+0x4a8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCC_OscConfig+0x47a>
 80032e8:	e001      	b.n	80032ee <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40007000 	.word	0x40007000
 8003300:	42470060 	.word	0x42470060

08003304 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003304:	b084      	sub	sp, #16
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	f107 001c 	add.w	r0, r7, #28
 8003312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	2b01      	cmp	r3, #1
 800331a:	d122      	bne.n	8003362 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003346:	2b01      	cmp	r3, #1
 8003348:	d105      	bne.n	8003356 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f001 faae 	bl	80048b8 <USB_CoreReset>
 800335c:	4603      	mov	r3, r0
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	e01a      	b.n	8003398 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f001 faa2 	bl	80048b8 <USB_CoreReset>
 8003374:	4603      	mov	r3, r0
 8003376:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	639a      	str	r2, [r3, #56]	; 0x38
 800338a:	e005      	b.n	8003398 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339a:	2b01      	cmp	r3, #1
 800339c:	d10b      	bne.n	80033b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f043 0206 	orr.w	r2, r3, #6
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f043 0220 	orr.w	r2, r3, #32
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033c2:	b004      	add	sp, #16
 80033c4:	4770      	bx	lr
	...

080033c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	4613      	mov	r3, r2
 80033d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d165      	bne.n	80034a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4a41      	ldr	r2, [pc, #260]	; (80034e4 <USB_SetTurnaroundTime+0x11c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d906      	bls.n	80033f2 <USB_SetTurnaroundTime+0x2a>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4a40      	ldr	r2, [pc, #256]	; (80034e8 <USB_SetTurnaroundTime+0x120>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d802      	bhi.n	80033f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80033ec:	230f      	movs	r3, #15
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	e062      	b.n	80034b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4a3c      	ldr	r2, [pc, #240]	; (80034e8 <USB_SetTurnaroundTime+0x120>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d906      	bls.n	8003408 <USB_SetTurnaroundTime+0x40>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	4a3b      	ldr	r2, [pc, #236]	; (80034ec <USB_SetTurnaroundTime+0x124>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d802      	bhi.n	8003408 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003402:	230e      	movs	r3, #14
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e057      	b.n	80034b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4a38      	ldr	r2, [pc, #224]	; (80034ec <USB_SetTurnaroundTime+0x124>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d906      	bls.n	800341e <USB_SetTurnaroundTime+0x56>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4a37      	ldr	r2, [pc, #220]	; (80034f0 <USB_SetTurnaroundTime+0x128>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d802      	bhi.n	800341e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003418:	230d      	movs	r3, #13
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	e04c      	b.n	80034b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4a33      	ldr	r2, [pc, #204]	; (80034f0 <USB_SetTurnaroundTime+0x128>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d906      	bls.n	8003434 <USB_SetTurnaroundTime+0x6c>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4a32      	ldr	r2, [pc, #200]	; (80034f4 <USB_SetTurnaroundTime+0x12c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d802      	bhi.n	8003434 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800342e:	230c      	movs	r3, #12
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	e041      	b.n	80034b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4a2f      	ldr	r2, [pc, #188]	; (80034f4 <USB_SetTurnaroundTime+0x12c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d906      	bls.n	800344a <USB_SetTurnaroundTime+0x82>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4a2e      	ldr	r2, [pc, #184]	; (80034f8 <USB_SetTurnaroundTime+0x130>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d802      	bhi.n	800344a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003444:	230b      	movs	r3, #11
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e036      	b.n	80034b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4a2a      	ldr	r2, [pc, #168]	; (80034f8 <USB_SetTurnaroundTime+0x130>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d906      	bls.n	8003460 <USB_SetTurnaroundTime+0x98>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4a29      	ldr	r2, [pc, #164]	; (80034fc <USB_SetTurnaroundTime+0x134>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d802      	bhi.n	8003460 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800345a:	230a      	movs	r3, #10
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	e02b      	b.n	80034b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a26      	ldr	r2, [pc, #152]	; (80034fc <USB_SetTurnaroundTime+0x134>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d906      	bls.n	8003476 <USB_SetTurnaroundTime+0xae>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4a25      	ldr	r2, [pc, #148]	; (8003500 <USB_SetTurnaroundTime+0x138>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d802      	bhi.n	8003476 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003470:	2309      	movs	r3, #9
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	e020      	b.n	80034b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4a21      	ldr	r2, [pc, #132]	; (8003500 <USB_SetTurnaroundTime+0x138>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d906      	bls.n	800348c <USB_SetTurnaroundTime+0xc4>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4a20      	ldr	r2, [pc, #128]	; (8003504 <USB_SetTurnaroundTime+0x13c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d802      	bhi.n	800348c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003486:	2308      	movs	r3, #8
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e015      	b.n	80034b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4a1d      	ldr	r2, [pc, #116]	; (8003504 <USB_SetTurnaroundTime+0x13c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d906      	bls.n	80034a2 <USB_SetTurnaroundTime+0xda>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4a1c      	ldr	r2, [pc, #112]	; (8003508 <USB_SetTurnaroundTime+0x140>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d802      	bhi.n	80034a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800349c:	2307      	movs	r3, #7
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e00a      	b.n	80034b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80034a2:	2306      	movs	r3, #6
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e007      	b.n	80034b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d102      	bne.n	80034b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80034ae:	2309      	movs	r3, #9
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	e001      	b.n	80034b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80034b4:	2309      	movs	r3, #9
 80034b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	029b      	lsls	r3, r3, #10
 80034cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	00d8acbf 	.word	0x00d8acbf
 80034e8:	00e4e1bf 	.word	0x00e4e1bf
 80034ec:	00f423ff 	.word	0x00f423ff
 80034f0:	0106737f 	.word	0x0106737f
 80034f4:	011a499f 	.word	0x011a499f
 80034f8:	01312cff 	.word	0x01312cff
 80034fc:	014ca43f 	.word	0x014ca43f
 8003500:	016e35ff 	.word	0x016e35ff
 8003504:	01a6ab1f 	.word	0x01a6ab1f
 8003508:	01e847ff 	.word	0x01e847ff

0800350c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f043 0201 	orr.w	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f023 0201 	bic.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d106      	bne.n	800357c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	e00b      	b.n	8003594 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	e001      	b.n	8003594 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e003      	b.n	800359c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003594:	2032      	movs	r0, #50	; 0x32
 8003596:	f7fd fa21 	bl	80009dc <HAL_Delay>

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035a4:	b084      	sub	sp, #16
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	e009      	b.n	80035d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	3340      	adds	r3, #64	; 0x40
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	2200      	movs	r2, #0
 80035d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	3301      	adds	r3, #1
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b0e      	cmp	r3, #14
 80035dc:	d9f2      	bls.n	80035c4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80035de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d11c      	bne.n	800361e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f2:	f043 0302 	orr.w	r3, r3, #2
 80035f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e005      	b.n	800362a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003630:	461a      	mov	r2, r3
 8003632:	2300      	movs	r3, #0
 8003634:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363c:	4619      	mov	r1, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003644:	461a      	mov	r2, r3
 8003646:	680b      	ldr	r3, [r1, #0]
 8003648:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	2b01      	cmp	r3, #1
 800364e:	d10c      	bne.n	800366a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d104      	bne.n	8003660 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003656:	2100      	movs	r1, #0
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f949 	bl	80038f0 <USB_SetDevSpeed>
 800365e:	e008      	b.n	8003672 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003660:	2101      	movs	r1, #1
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f944 	bl	80038f0 <USB_SetDevSpeed>
 8003668:	e003      	b.n	8003672 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800366a:	2103      	movs	r1, #3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f93f 	bl	80038f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003672:	2110      	movs	r1, #16
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f8f3 	bl	8003860 <USB_FlushTxFifo>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f911 	bl	80038ac <USB_FlushRxFifo>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369a:	461a      	mov	r2, r3
 800369c:	2300      	movs	r3, #0
 800369e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a6:	461a      	mov	r2, r3
 80036a8:	2300      	movs	r3, #0
 80036aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b2:	461a      	mov	r2, r3
 80036b4:	2300      	movs	r3, #0
 80036b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036b8:	2300      	movs	r3, #0
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	e043      	b.n	8003746 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036d4:	d118      	bne.n	8003708 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e8:	461a      	mov	r2, r3
 80036ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	e013      	b.n	800371a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fe:	461a      	mov	r2, r3
 8003700:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e008      	b.n	800371a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003714:	461a      	mov	r2, r3
 8003716:	2300      	movs	r3, #0
 8003718:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003726:	461a      	mov	r2, r3
 8003728:	2300      	movs	r3, #0
 800372a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003738:	461a      	mov	r2, r3
 800373a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800373e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	3301      	adds	r3, #1
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	429a      	cmp	r2, r3
 800374c:	d3b7      	bcc.n	80036be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	e043      	b.n	80037dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800376a:	d118      	bne.n	800379e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377e:	461a      	mov	r2, r3
 8003780:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e013      	b.n	80037b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003794:	461a      	mov	r2, r3
 8003796:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	e008      	b.n	80037b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037aa:	461a      	mov	r2, r3
 80037ac:	2300      	movs	r3, #0
 80037ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037bc:	461a      	mov	r2, r3
 80037be:	2300      	movs	r3, #0
 80037c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ce:	461a      	mov	r2, r3
 80037d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	3301      	adds	r3, #1
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d3b7      	bcc.n	8003754 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003804:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f043 0210 	orr.w	r2, r3, #16
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <USB_DevInit+0x2b8>)
 800381e:	4313      	orrs	r3, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f043 0208 	orr.w	r2, r3, #8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d107      	bne.n	800384c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800384c:	7dfb      	ldrb	r3, [r7, #23]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003858:	b004      	add	sp, #16
 800385a:	4770      	bx	lr
 800385c:	803c3800 	.word	0x803c3800

08003860 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	019b      	lsls	r3, r3, #6
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3301      	adds	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <USB_FlushTxFifo+0x48>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d901      	bls.n	800388c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e006      	b.n	800389a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b20      	cmp	r3, #32
 8003896:	d0f0      	beq.n	800387a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	00030d40 	.word	0x00030d40

080038ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2210      	movs	r2, #16
 80038bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3301      	adds	r3, #1
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4a09      	ldr	r2, [pc, #36]	; (80038ec <USB_FlushRxFifo+0x40>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e006      	b.n	80038de <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d0f0      	beq.n	80038be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	00030d40 	.word	0x00030d40

080038f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	68f9      	ldr	r1, [r7, #12]
 800390c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003910:	4313      	orrs	r3, r2
 8003912:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003922:	b480      	push	{r7}
 8003924:	b087      	sub	sp, #28
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0306 	and.w	r3, r3, #6
 800393a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003942:	2300      	movs	r3, #0
 8003944:	75fb      	strb	r3, [r7, #23]
 8003946:	e00a      	b.n	800395e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d002      	beq.n	8003954 <USB_GetDevSpeed+0x32>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b06      	cmp	r3, #6
 8003952:	d102      	bne.n	800395a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003954:	2302      	movs	r3, #2
 8003956:	75fb      	strb	r3, [r7, #23]
 8003958:	e001      	b.n	800395e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800395a:	230f      	movs	r3, #15
 800395c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800395e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003960:	4618      	mov	r0, r3
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	785b      	ldrb	r3, [r3, #1]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d13a      	bne.n	80039fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	2101      	movs	r1, #1
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	b29b      	uxth	r3, r3
 80039a0:	68f9      	ldr	r1, [r7, #12]
 80039a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d155      	bne.n	8003a6c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	78db      	ldrb	r3, [r3, #3]
 80039da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80039dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	059b      	lsls	r3, r3, #22
 80039e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80039e4:	4313      	orrs	r3, r2
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	0151      	lsls	r1, r2, #5
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	440a      	add	r2, r1
 80039ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	e036      	b.n	8003a6c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	2101      	movs	r1, #1
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	68f9      	ldr	r1, [r7, #12]
 8003a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d11a      	bne.n	8003a6c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	78db      	ldrb	r3, [r3, #3]
 8003a50:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a52:	430b      	orrs	r3, r1
 8003a54:	4313      	orrs	r3, r2
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	0151      	lsls	r1, r2, #5
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	440a      	add	r2, r1
 8003a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
	...

08003a7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	785b      	ldrb	r3, [r3, #1]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d161      	bne.n	8003b5c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aae:	d11f      	bne.n	8003af0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	0151      	lsls	r1, r2, #5
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	440a      	add	r2, r1
 8003ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ace:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	0151      	lsls	r1, r2, #5
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	440a      	add	r2, r1
 8003ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003aee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	2101      	movs	r1, #1
 8003b02:	fa01 f303 	lsl.w	r3, r1, r3
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	68f9      	ldr	r1, [r7, #12]
 8003b0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b10:	4013      	ands	r3, r2
 8003b12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	2101      	movs	r1, #1
 8003b26:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	68f9      	ldr	r1, [r7, #12]
 8003b30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b34:	4013      	ands	r3, r2
 8003b36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	0159      	lsls	r1, r3, #5
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	440b      	add	r3, r1
 8003b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b52:	4619      	mov	r1, r3
 8003b54:	4b35      	ldr	r3, [pc, #212]	; (8003c2c <USB_DeactivateEndpoint+0x1b0>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]
 8003b5a:	e060      	b.n	8003c1e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b72:	d11f      	bne.n	8003bb4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b92:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	0151      	lsls	r1, r2, #5
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	440a      	add	r2, r1
 8003baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	68f9      	ldr	r1, [r7, #12]
 8003bd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	2101      	movs	r1, #1
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	041b      	lsls	r3, r3, #16
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	68f9      	ldr	r1, [r7, #12]
 8003bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	0159      	lsls	r1, r3, #5
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	440b      	add	r3, r1
 8003c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c16:	4619      	mov	r1, r3
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <USB_DeactivateEndpoint+0x1b4>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	ec337800 	.word	0xec337800
 8003c30:	eff37800 	.word	0xeff37800

08003c34 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	; 0x28
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	785b      	ldrb	r3, [r3, #1]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	f040 815c 	bne.w	8003f0e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d132      	bne.n	8003cc4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	0151      	lsls	r1, r2, #5
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	440a      	add	r2, r1
 8003c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	0151      	lsls	r1, r2, #5
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	440a      	add	r2, r1
 8003c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ca0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	0151      	lsls	r1, r2, #5
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	440a      	add	r2, r1
 8003cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cbc:	0cdb      	lsrs	r3, r3, #19
 8003cbe:	04db      	lsls	r3, r3, #19
 8003cc0:	6113      	str	r3, [r2, #16]
 8003cc2:	e074      	b.n	8003dae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	0151      	lsls	r1, r2, #5
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	440a      	add	r2, r1
 8003cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cde:	0cdb      	lsrs	r3, r3, #19
 8003ce0:	04db      	lsls	r3, r3, #19
 8003ce2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	0151      	lsls	r1, r2, #5
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	440a      	add	r2, r1
 8003cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6959      	ldr	r1, [r3, #20]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	440b      	add	r3, r1
 8003d20:	1e59      	subs	r1, r3, #1
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d2a:	04d9      	lsls	r1, r3, #19
 8003d2c:	4b9d      	ldr	r3, [pc, #628]	; (8003fa4 <USB_EPStartXfer+0x370>)
 8003d2e:	400b      	ands	r3, r1
 8003d30:	69b9      	ldr	r1, [r7, #24]
 8003d32:	0148      	lsls	r0, r1, #5
 8003d34:	69f9      	ldr	r1, [r7, #28]
 8003d36:	4401      	add	r1, r0
 8003d38:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d56:	69b9      	ldr	r1, [r7, #24]
 8003d58:	0148      	lsls	r0, r1, #5
 8003d5a:	69f9      	ldr	r1, [r7, #28]
 8003d5c:	4401      	add	r1, r0
 8003d5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d62:	4313      	orrs	r3, r2
 8003d64:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	78db      	ldrb	r3, [r3, #3]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d11f      	bne.n	8003dae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	0151      	lsls	r1, r2, #5
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	440a      	add	r2, r1
 8003d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d88:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003d8c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	0151      	lsls	r1, r2, #5
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	440a      	add	r2, r1
 8003da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d14b      	bne.n	8003e4c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d009      	beq.n	8003dd0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc8:	461a      	mov	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	78db      	ldrb	r3, [r3, #3]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d128      	bne.n	8003e2a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d110      	bne.n	8003e0a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	0151      	lsls	r1, r2, #5
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	e00f      	b.n	8003e2a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	0151      	lsls	r1, r2, #5
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	440a      	add	r2, r1
 8003e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e28:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	0151      	lsls	r1, r2, #5
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	440a      	add	r2, r1
 8003e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	e12f      	b.n	80040ac <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	0151      	lsls	r1, r2, #5
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	440a      	add	r2, r1
 8003e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e6a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	78db      	ldrb	r3, [r3, #3]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d015      	beq.n	8003ea0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8117 	beq.w	80040ac <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	2101      	movs	r1, #1
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	69f9      	ldr	r1, [r7, #28]
 8003e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	634b      	str	r3, [r1, #52]	; 0x34
 8003e9e:	e105      	b.n	80040ac <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d110      	bne.n	8003ed2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	0151      	lsls	r1, r2, #5
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	440a      	add	r2, r1
 8003ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	e00f      	b.n	8003ef2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	68d9      	ldr	r1, [r3, #12]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	781a      	ldrb	r2, [r3, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	b298      	uxth	r0, r3
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	4603      	mov	r3, r0
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fa2b 	bl	8004362 <USB_WritePacket>
 8003f0c:	e0ce      	b.n	80040ac <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	0151      	lsls	r1, r2, #5
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	440a      	add	r2, r1
 8003f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f28:	0cdb      	lsrs	r3, r3, #19
 8003f2a:	04db      	lsls	r3, r3, #19
 8003f2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	0151      	lsls	r1, r2, #5
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	440a      	add	r2, r1
 8003f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f50:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d126      	bne.n	8003fa8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f70:	69b9      	ldr	r1, [r7, #24]
 8003f72:	0148      	lsls	r0, r1, #5
 8003f74:	69f9      	ldr	r1, [r7, #28]
 8003f76:	4401      	add	r1, r0
 8003f78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	0151      	lsls	r1, r2, #5
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	440a      	add	r2, r1
 8003f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f9e:	6113      	str	r3, [r2, #16]
 8003fa0:	e036      	b.n	8004010 <USB_EPStartXfer+0x3dc>
 8003fa2:	bf00      	nop
 8003fa4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	1e5a      	subs	r2, r3, #1
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	8afb      	ldrh	r3, [r7, #22]
 8003fce:	04d9      	lsls	r1, r3, #19
 8003fd0:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <USB_EPStartXfer+0x484>)
 8003fd2:	400b      	ands	r3, r1
 8003fd4:	69b9      	ldr	r1, [r7, #24]
 8003fd6:	0148      	lsls	r0, r1, #5
 8003fd8:	69f9      	ldr	r1, [r7, #28]
 8003fda:	4401      	add	r1, r0
 8003fdc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	8af9      	ldrh	r1, [r7, #22]
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004000:	69b9      	ldr	r1, [r7, #24]
 8004002:	0148      	lsls	r0, r1, #5
 8004004:	69f9      	ldr	r1, [r7, #28]
 8004006:	4401      	add	r1, r0
 8004008:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800400c:	4313      	orrs	r3, r2
 800400e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d10d      	bne.n	8004032 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	68d9      	ldr	r1, [r3, #12]
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402e:	460a      	mov	r2, r1
 8004030:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	78db      	ldrb	r3, [r3, #3]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d128      	bne.n	800408c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d110      	bne.n	800406c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	0151      	lsls	r1, r2, #5
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	440a      	add	r2, r1
 8004060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004064:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e00f      	b.n	800408c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	0151      	lsls	r1, r2, #5
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	440a      	add	r2, r1
 8004082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	0151      	lsls	r1, r2, #5
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	440a      	add	r2, r1
 80040a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	1ff80000 	.word	0x1ff80000

080040bc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	4613      	mov	r3, r2
 80040c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	785b      	ldrb	r3, [r3, #1]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	f040 80cd 	bne.w	8004278 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d132      	bne.n	800414c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	0151      	lsls	r1, r2, #5
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	440a      	add	r2, r1
 80040fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004100:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004104:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004108:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	0151      	lsls	r1, r2, #5
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	440a      	add	r2, r1
 8004120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004124:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004128:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	4413      	add	r3, r2
 8004132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	0151      	lsls	r1, r2, #5
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	440a      	add	r2, r1
 8004140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004144:	0cdb      	lsrs	r3, r3, #19
 8004146:	04db      	lsls	r3, r3, #19
 8004148:	6113      	str	r3, [r2, #16]
 800414a:	e04e      	b.n	80041ea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	0151      	lsls	r1, r2, #5
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	440a      	add	r2, r1
 8004162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004166:	0cdb      	lsrs	r3, r3, #19
 8004168:	04db      	lsls	r3, r3, #19
 800416a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	0151      	lsls	r1, r2, #5
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	440a      	add	r2, r1
 8004182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004186:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800418a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800418e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	429a      	cmp	r2, r3
 800419a:	d903      	bls.n	80041a4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	0151      	lsls	r1, r2, #5
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	440a      	add	r2, r1
 80041ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041da:	6939      	ldr	r1, [r7, #16]
 80041dc:	0148      	lsls	r0, r1, #5
 80041de:	6979      	ldr	r1, [r7, #20]
 80041e0:	4401      	add	r1, r0
 80041e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041e6:	4313      	orrs	r3, r2
 80041e8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d11e      	bne.n	800422e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d009      	beq.n	800420c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004204:	461a      	mov	r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	0151      	lsls	r1, r2, #5
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	440a      	add	r2, r1
 8004222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004226:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	e092      	b.n	8004354 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	0151      	lsls	r1, r2, #5
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	440a      	add	r2, r1
 8004244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004248:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800424c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d07e      	beq.n	8004354 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	2101      	movs	r1, #1
 8004268:	fa01 f303 	lsl.w	r3, r1, r3
 800426c:	6979      	ldr	r1, [r7, #20]
 800426e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004272:	4313      	orrs	r3, r2
 8004274:	634b      	str	r3, [r1, #52]	; 0x34
 8004276:	e06d      	b.n	8004354 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004292:	0cdb      	lsrs	r3, r3, #19
 8004294:	04db      	lsls	r3, r3, #19
 8004296:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042ba:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	0151      	lsls	r1, r2, #5
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	440a      	add	r2, r1
 80042e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004302:	6939      	ldr	r1, [r7, #16]
 8004304:	0148      	lsls	r0, r1, #5
 8004306:	6979      	ldr	r1, [r7, #20]
 8004308:	4401      	add	r1, r0
 800430a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800430e:	4313      	orrs	r3, r2
 8004310:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d10d      	bne.n	8004334 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d009      	beq.n	8004334 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	68d9      	ldr	r1, [r3, #12]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004330:	460a      	mov	r2, r1
 8004332:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	0151      	lsls	r1, r2, #5
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	440a      	add	r2, r1
 800434a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800434e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004352:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004362:	b480      	push	{r7}
 8004364:	b089      	sub	sp, #36	; 0x24
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	4611      	mov	r1, r2
 800436e:	461a      	mov	r2, r3
 8004370:	460b      	mov	r3, r1
 8004372:	71fb      	strb	r3, [r7, #7]
 8004374:	4613      	mov	r3, r2
 8004376:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004380:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004384:	2b00      	cmp	r3, #0
 8004386:	d11a      	bne.n	80043be <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004388:	88bb      	ldrh	r3, [r7, #4]
 800438a:	3303      	adds	r3, #3
 800438c:	089b      	lsrs	r3, r3, #2
 800438e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004390:	2300      	movs	r3, #0
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	e00f      	b.n	80043b6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	031a      	lsls	r2, r3, #12
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	4413      	add	r3, r2
 800439e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a2:	461a      	mov	r2, r3
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	3304      	adds	r3, #4
 80043ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	3301      	adds	r3, #1
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d3eb      	bcc.n	8004396 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3724      	adds	r7, #36	; 0x24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b089      	sub	sp, #36	; 0x24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	3303      	adds	r3, #3
 80043e6:	089b      	lsrs	r3, r3, #2
 80043e8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80043ea:	2300      	movs	r3, #0
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	e00b      	b.n	8004408 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	3304      	adds	r3, #4
 8004400:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	3301      	adds	r3, #1
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	429a      	cmp	r2, r3
 800440e:	d3ef      	bcc.n	80043f0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004410:	69fb      	ldr	r3, [r7, #28]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3724      	adds	r7, #36	; 0x24
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800441e:	b480      	push	{r7}
 8004420:	b085      	sub	sp, #20
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d12c      	bne.n	8004494 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	db12      	blt.n	8004472 <USB_EPSetStall+0x54>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00f      	beq.n	8004472 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	440a      	add	r2, r1
 8004468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800446c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004470:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	0151      	lsls	r1, r2, #5
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	440a      	add	r2, r1
 8004488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e02b      	b.n	80044ec <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	db12      	blt.n	80044cc <USB_EPSetStall+0xae>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00f      	beq.n	80044cc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044ca:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	0151      	lsls	r1, r2, #5
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	440a      	add	r2, r1
 80044e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b085      	sub	sp, #20
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d128      	bne.n	8004568 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	0151      	lsls	r1, r2, #5
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	440a      	add	r2, r1
 800452c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004530:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004534:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	78db      	ldrb	r3, [r3, #3]
 800453a:	2b03      	cmp	r3, #3
 800453c:	d003      	beq.n	8004546 <USB_EPClearStall+0x4c>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	78db      	ldrb	r3, [r3, #3]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d138      	bne.n	80045b8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	440a      	add	r2, r1
 800455c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e027      	b.n	80045b8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004582:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004586:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	78db      	ldrb	r3, [r3, #3]
 800458c:	2b03      	cmp	r3, #3
 800458e:	d003      	beq.n	8004598 <USB_EPClearStall+0x9e>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	78db      	ldrb	r3, [r3, #3]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d10f      	bne.n	80045b8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	0151      	lsls	r1, r2, #5
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	440a      	add	r2, r1
 80045ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	460b      	mov	r3, r1
 80045d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80045e8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80045fa:	68f9      	ldr	r1, [r7, #12]
 80045fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800462c:	f023 0302 	bic.w	r3, r3, #2
 8004630:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004632:	2003      	movs	r0, #3
 8004634:	f7fc f9d2 	bl	80009dc <HAL_Delay>

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004662:	2003      	movs	r0, #3
 8004664:	f7fc f9ba 	bl	80009dc <HAL_Delay>

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4013      	ands	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800468a:	68fb      	ldr	r3, [r7, #12]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4013      	ands	r3, r2
 80046ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	0c1b      	lsrs	r3, r3, #16
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	4013      	ands	r3, r2
 80046ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	b29b      	uxth	r3, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	4013      	ands	r3, r2
 800472c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800472e:	68bb      	ldr	r3, [r7, #8]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
 800476c:	01db      	lsls	r3, r3, #7
 800476e:	b2db      	uxtb	r3, r3
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800478a:	68bb      	ldr	r3, [r7, #8]
}
 800478c:	4618      	mov	r0, r3
 800478e:	371c      	adds	r7, #28
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	f003 0301 	and.w	r3, r3, #1
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80047d2:	f023 0307 	bic.w	r3, r3, #7
 80047d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	460b      	mov	r3, r1
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	333c      	adds	r3, #60	; 0x3c
 8004812:	3304      	adds	r3, #4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	4a26      	ldr	r2, [pc, #152]	; (80048b4 <USB_EP0_OutStart+0xb8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d90a      	bls.n	8004836 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800482c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004830:	d101      	bne.n	8004836 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e037      	b.n	80048a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483c:	461a      	mov	r2, r3
 800483e:	2300      	movs	r3, #0
 8004840:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004854:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004864:	f043 0318 	orr.w	r3, r3, #24
 8004868:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004878:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800487c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800487e:	7afb      	ldrb	r3, [r7, #11]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d10f      	bne.n	80048a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488a:	461a      	mov	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800489e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80048a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	4f54300a 	.word	0x4f54300a

080048b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3301      	adds	r3, #1
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4a13      	ldr	r2, [pc, #76]	; (800491c <USB_CoreReset+0x64>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e01b      	b.n	800490e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	daf2      	bge.n	80048c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f043 0201 	orr.w	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4a09      	ldr	r2, [pc, #36]	; (800491c <USB_CoreReset+0x64>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d901      	bls.n	8004900 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e006      	b.n	800490e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b01      	cmp	r3, #1
 800490a:	d0f0      	beq.n	80048ee <USB_CoreReset+0x36>

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	00030d40 	.word	0x00030d40

08004920 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004930:	2303      	movs	r3, #3
 8004932:	e004      	b.n	800493e <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 8004958:	4a0c      	ldr	r2, [pc, #48]	; (800498c <USBD_MIDI_Init+0x40>)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 800495e:	2340      	movs	r3, #64	; 0x40
 8004960:	2202      	movs	r2, #2
 8004962:	2181      	movs	r1, #129	; 0x81
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f001 fc8c 	bl	8006282 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 800496a:	2340      	movs	r3, #64	; 0x40
 800496c:	2202      	movs	r2, #2
 800496e:	2101      	movs	r1, #1
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f001 fc86 	bl	8006282 <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8004976:	2340      	movs	r3, #64	; 0x40
 8004978:	4a05      	ldr	r2, [pc, #20]	; (8004990 <USBD_MIDI_Init+0x44>)
 800497a:	2101      	movs	r1, #1
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f001 fd6f 	bl	8006460 <USBD_LL_PrepareReceive>
  return 0;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20000130 	.word	0x20000130
 8004990:	20000148 	.word	0x20000148

08004994 <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 80049a0:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <USBD_MIDI_DeInit+0x2c>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 80049a6:	2181      	movs	r1, #129	; 0x81
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f001 fc90 	bl	80062ce <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 80049ae:	2101      	movs	r1, #1
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f001 fc8c 	bl	80062ce <USBD_LL_CloseEP>
  return 0;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000130 	.word	0x20000130

080049c4 <USBD_MIDI_DataIn>:

static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <USBD_MIDI_DataIn+0x28>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d102      	bne.n	80049de <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 80049d8:	4b04      	ldr	r3, [pc, #16]	; (80049ec <USBD_MIDI_DataIn+0x28>)
 80049da:	2200      	movs	r2, #0
 80049dc:	701a      	strb	r2, [r3, #0]
  }
  return USBD_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	20000138 	.word	0x20000138

080049f0 <USBD_MIDI_DataOut>:

static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a02:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	1a9b      	subs	r3, r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	897a      	ldrh	r2, [r7, #10]
 8004a24:	4611      	mov	r1, r2
 8004a26:	4806      	ldr	r0, [pc, #24]	; (8004a40 <USBD_MIDI_DataOut+0x50>)
 8004a28:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8004a2a:	2340      	movs	r3, #64	; 0x40
 8004a2c:	4a04      	ldr	r2, [pc, #16]	; (8004a40 <USBD_MIDI_DataOut+0x50>)
 8004a2e:	2101      	movs	r1, #1
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f001 fd15 	bl	8006460 <USBD_LL_PrepareReceive>
  return USBD_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	20000148 	.word	0x20000148

08004a44 <USBD_MIDI_GetCfgDesc>:
    USB_Tx_State = 1;
    USBD_LL_Transmit (pInstance, MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length);
  }
}

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2265      	movs	r2, #101	; 0x65
 8004a50:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 8004a52:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	2000004c 	.word	0x2000004c

08004a64 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e025      	b.n	8004ac8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	79fa      	ldrb	r2, [r7, #7]
 8004aba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f001 fb79 	bl	80061b4 <USBD_LL_Init>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e010      	b.n	8004b0a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	f107 020e 	add.w	r2, r7, #14
 8004afc:	4610      	mov	r0, r2
 8004afe:	4798      	blx	r3
 8004b00:	4602      	mov	r2, r0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f001 fb96 	bl	800624c <USBD_LL_Start>
 8004b20:	4603      	mov	r3, r0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	78fa      	ldrb	r2, [r7, #3]
 8004b64:	4611      	mov	r1, r2
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	4798      	blx	r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	4611      	mov	r1, r2
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
  }

  return USBD_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004bb8:	6839      	ldr	r1, [r7, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 ff56 	bl	8005a6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004bce:	461a      	mov	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d00e      	beq.n	8004c02 <USBD_LL_SetupStage+0x5a>
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d302      	bcc.n	8004bee <USBD_LL_SetupStage+0x46>
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d014      	beq.n	8004c16 <USBD_LL_SetupStage+0x6e>
 8004bec:	e01d      	b.n	8004c2a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fa18 	bl	800502c <USBD_StdDevReq>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004c00:	e020      	b.n	8004c44 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fa7c 	bl	8005108 <USBD_StdItfReq>
 8004c10:	4603      	mov	r3, r0
 8004c12:	73fb      	strb	r3, [r7, #15]
      break;
 8004c14:	e016      	b.n	8004c44 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fab8 	bl	8005194 <USBD_StdEPReq>
 8004c24:	4603      	mov	r3, r0
 8004c26:	73fb      	strb	r3, [r7, #15]
      break;
 8004c28:	e00c      	b.n	8004c44 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004c30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	4619      	mov	r1, r3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f001 fb67 	bl	800630c <USBD_LL_StallEP>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	73fb      	strb	r3, [r7, #15]
      break;
 8004c42:	bf00      	nop
  }

  return ret;
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	460b      	mov	r3, r1
 8004c58:	607a      	str	r2, [r7, #4]
 8004c5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004c5c:	7afb      	ldrb	r3, [r7, #11]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d137      	bne.n	8004cd2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004c68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d14a      	bne.n	8004d0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d913      	bls.n	8004ca8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	1ad2      	subs	r2, r2, r3
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	4293      	cmp	r3, r2
 8004c98:	bf28      	it	cs
 8004c9a:	4613      	movcs	r3, r2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 ffba 	bl	8005c1a <USBD_CtlContinueRx>
 8004ca6:	e030      	b.n	8004d0a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d105      	bne.n	8004cca <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 ffb6 	bl	8005c3c <USBD_CtlSendStatus>
 8004cd0:	e01b      	b.n	8004d0a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d013      	beq.n	8004d06 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d10e      	bne.n	8004d06 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	7afa      	ldrb	r2, [r7, #11]
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	4798      	blx	r3
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004cfc:	7dfb      	ldrb	r3, [r7, #23]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
 8004d04:	e002      	b.n	8004d0c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e000      	b.n	8004d0c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004d22:	7afb      	ldrb	r3, [r7, #11]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d16a      	bne.n	8004dfe <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3314      	adds	r3, #20
 8004d2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d155      	bne.n	8004de4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d914      	bls.n	8004d6e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	1ad2      	subs	r2, r2, r3
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	461a      	mov	r2, r3
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 ff4c 	bl	8005bf8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d60:	2300      	movs	r3, #0
 8004d62:	2200      	movs	r2, #0
 8004d64:	2100      	movs	r1, #0
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f001 fb7a 	bl	8006460 <USBD_LL_PrepareReceive>
 8004d6c:	e03a      	b.n	8004de4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d11c      	bne.n	8004db4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d316      	bcc.n	8004db4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d20f      	bcs.n	8004db4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004d94:	2200      	movs	r2, #0
 8004d96:	2100      	movs	r1, #0
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 ff2d 	bl	8005bf8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004da6:	2300      	movs	r3, #0
 8004da8:	2200      	movs	r2, #0
 8004daa:	2100      	movs	r1, #0
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f001 fb57 	bl	8006460 <USBD_LL_PrepareReceive>
 8004db2:	e017      	b.n	8004de4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d105      	bne.n	8004dd6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004dd6:	2180      	movs	r1, #128	; 0x80
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f001 fa97 	bl	800630c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 ff3f 	bl	8005c62 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d123      	bne.n	8004e36 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7ff fe9b 	bl	8004b2a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004dfc:	e01b      	b.n	8004e36 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d013      	beq.n	8004e32 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d10e      	bne.n	8004e32 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	7afa      	ldrb	r2, [r7, #11]
 8004e1e:	4611      	mov	r1, r2
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	4798      	blx	r3
 8004e24:	4603      	mov	r3, r0
 8004e26:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8004e2e:	7dfb      	ldrb	r3, [r7, #23]
 8004e30:	e002      	b.n	8004e38 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e000      	b.n	8004e38 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6852      	ldr	r2, [r2, #4]
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	4611      	mov	r1, r2
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e84:	2340      	movs	r3, #64	; 0x40
 8004e86:	2200      	movs	r2, #0
 8004e88:	2100      	movs	r1, #0
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f001 f9f9 	bl	8006282 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2240      	movs	r2, #64	; 0x40
 8004e9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ea0:	2340      	movs	r3, #64	; 0x40
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2180      	movs	r1, #128	; 0x80
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f001 f9eb 	bl	8006282 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2240      	movs	r2, #64	; 0x40
 8004eb6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d105      	bne.n	8004f2a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d10b      	bne.n	8004f62 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d009      	beq.n	8004fe4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6852      	ldr	r2, [r2, #4]
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	4611      	mov	r1, r2
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	4798      	blx	r3
  }

  return USBD_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b087      	sub	sp, #28
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	3301      	adds	r3, #1
 8005004:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800500c:	8a3b      	ldrh	r3, [r7, #16]
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	b21a      	sxth	r2, r3
 8005012:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005016:	4313      	orrs	r3, r2
 8005018:	b21b      	sxth	r3, r3
 800501a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800501c:	89fb      	ldrh	r3, [r7, #14]
}
 800501e:	4618      	mov	r0, r3
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005042:	2b20      	cmp	r3, #32
 8005044:	d004      	beq.n	8005050 <USBD_StdDevReq+0x24>
 8005046:	2b40      	cmp	r3, #64	; 0x40
 8005048:	d002      	beq.n	8005050 <USBD_StdDevReq+0x24>
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <USBD_StdDevReq+0x38>
 800504e:	e050      	b.n	80050f2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4798      	blx	r3
 800505e:	4603      	mov	r3, r0
 8005060:	73fb      	strb	r3, [r7, #15]
    break;
 8005062:	e04b      	b.n	80050fc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	785b      	ldrb	r3, [r3, #1]
 8005068:	2b09      	cmp	r3, #9
 800506a:	d83c      	bhi.n	80050e6 <USBD_StdDevReq+0xba>
 800506c:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <USBD_StdDevReq+0x48>)
 800506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005072:	bf00      	nop
 8005074:	080050c9 	.word	0x080050c9
 8005078:	080050dd 	.word	0x080050dd
 800507c:	080050e7 	.word	0x080050e7
 8005080:	080050d3 	.word	0x080050d3
 8005084:	080050e7 	.word	0x080050e7
 8005088:	080050a7 	.word	0x080050a7
 800508c:	0800509d 	.word	0x0800509d
 8005090:	080050e7 	.word	0x080050e7
 8005094:	080050bf 	.word	0x080050bf
 8005098:	080050b1 	.word	0x080050b1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f9ce 	bl	8005440 <USBD_GetDescriptor>
      break;
 80050a4:	e024      	b.n	80050f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80050a6:	6839      	ldr	r1, [r7, #0]
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fb5d 	bl	8005768 <USBD_SetAddress>
      break;
 80050ae:	e01f      	b.n	80050f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80050b0:	6839      	ldr	r1, [r7, #0]
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fb9a 	bl	80057ec <USBD_SetConfig>
 80050b8:	4603      	mov	r3, r0
 80050ba:	73fb      	strb	r3, [r7, #15]
      break;
 80050bc:	e018      	b.n	80050f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80050be:	6839      	ldr	r1, [r7, #0]
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fc37 	bl	8005934 <USBD_GetConfig>
      break;
 80050c6:	e013      	b.n	80050f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80050c8:	6839      	ldr	r1, [r7, #0]
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fc66 	bl	800599c <USBD_GetStatus>
      break;
 80050d0:	e00e      	b.n	80050f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80050d2:	6839      	ldr	r1, [r7, #0]
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fc94 	bl	8005a02 <USBD_SetFeature>
      break;
 80050da:	e009      	b.n	80050f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80050dc:	6839      	ldr	r1, [r7, #0]
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fca3 	bl	8005a2a <USBD_ClrFeature>
      break;
 80050e4:	e004      	b.n	80050f0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80050e6:	6839      	ldr	r1, [r7, #0]
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fcf9 	bl	8005ae0 <USBD_CtlError>
      break;
 80050ee:	bf00      	nop
    }
    break;
 80050f0:	e004      	b.n	80050fc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80050f2:	6839      	ldr	r1, [r7, #0]
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fcf3 	bl	8005ae0 <USBD_CtlError>
    break;
 80050fa:	bf00      	nop
  }

  return ret;
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop

08005108 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800511e:	2b20      	cmp	r3, #32
 8005120:	d003      	beq.n	800512a <USBD_StdItfReq+0x22>
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d001      	beq.n	800512a <USBD_StdItfReq+0x22>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d12a      	bne.n	8005180 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005130:	3b01      	subs	r3, #1
 8005132:	2b02      	cmp	r3, #2
 8005134:	d81d      	bhi.n	8005172 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	889b      	ldrh	r3, [r3, #4]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	d813      	bhi.n	8005168 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	4798      	blx	r3
 800514e:	4603      	mov	r3, r0
 8005150:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	88db      	ldrh	r3, [r3, #6]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d110      	bne.n	800517c <USBD_StdItfReq+0x74>
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10d      	bne.n	800517c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fd6b 	bl	8005c3c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005166:	e009      	b.n	800517c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005168:	6839      	ldr	r1, [r7, #0]
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fcb8 	bl	8005ae0 <USBD_CtlError>
      break;
 8005170:	e004      	b.n	800517c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005172:	6839      	ldr	r1, [r7, #0]
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fcb3 	bl	8005ae0 <USBD_CtlError>
      break;
 800517a:	e000      	b.n	800517e <USBD_StdItfReq+0x76>
      break;
 800517c:	bf00      	nop
    }
    break;
 800517e:	e004      	b.n	800518a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005180:	6839      	ldr	r1, [r7, #0]
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fcac 	bl	8005ae0 <USBD_CtlError>
    break;
 8005188:	bf00      	nop
  }

  return ret;
 800518a:	7bfb      	ldrb	r3, [r7, #15]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	889b      	ldrh	r3, [r3, #4]
 80051a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d004      	beq.n	80051be <USBD_StdEPReq+0x2a>
 80051b4:	2b40      	cmp	r3, #64	; 0x40
 80051b6:	d002      	beq.n	80051be <USBD_StdEPReq+0x2a>
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <USBD_StdEPReq+0x3e>
 80051bc:	e135      	b.n	800542a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	6839      	ldr	r1, [r7, #0]
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	4798      	blx	r3
 80051cc:	4603      	mov	r3, r0
 80051ce:	73fb      	strb	r3, [r7, #15]
    break;
 80051d0:	e130      	b.n	8005434 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	785b      	ldrb	r3, [r3, #1]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d03e      	beq.n	8005258 <USBD_StdEPReq+0xc4>
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d002      	beq.n	80051e4 <USBD_StdEPReq+0x50>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d077      	beq.n	80052d2 <USBD_StdEPReq+0x13e>
 80051e2:	e11c      	b.n	800541e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d002      	beq.n	80051f4 <USBD_StdEPReq+0x60>
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d015      	beq.n	800521e <USBD_StdEPReq+0x8a>
 80051f2:	e02b      	b.n	800524c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80051f4:	7bbb      	ldrb	r3, [r7, #14]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <USBD_StdEPReq+0x80>
 80051fa:	7bbb      	ldrb	r3, [r7, #14]
 80051fc:	2b80      	cmp	r3, #128	; 0x80
 80051fe:	d009      	beq.n	8005214 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005200:	7bbb      	ldrb	r3, [r7, #14]
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f001 f881 	bl	800630c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800520a:	2180      	movs	r1, #128	; 0x80
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f001 f87d 	bl	800630c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005212:	e020      	b.n	8005256 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fc62 	bl	8005ae0 <USBD_CtlError>
        break;
 800521c:	e01b      	b.n	8005256 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	885b      	ldrh	r3, [r3, #2]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10e      	bne.n	8005244 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005226:	7bbb      	ldrb	r3, [r7, #14]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00b      	beq.n	8005244 <USBD_StdEPReq+0xb0>
 800522c:	7bbb      	ldrb	r3, [r7, #14]
 800522e:	2b80      	cmp	r3, #128	; 0x80
 8005230:	d008      	beq.n	8005244 <USBD_StdEPReq+0xb0>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	88db      	ldrh	r3, [r3, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800523a:	7bbb      	ldrb	r3, [r7, #14]
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f001 f864 	bl	800630c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fcf9 	bl	8005c3c <USBD_CtlSendStatus>

        break;
 800524a:	e004      	b.n	8005256 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800524c:	6839      	ldr	r1, [r7, #0]
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fc46 	bl	8005ae0 <USBD_CtlError>
        break;
 8005254:	bf00      	nop
      }
      break;
 8005256:	e0e7      	b.n	8005428 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800525e:	2b02      	cmp	r3, #2
 8005260:	d002      	beq.n	8005268 <USBD_StdEPReq+0xd4>
 8005262:	2b03      	cmp	r3, #3
 8005264:	d015      	beq.n	8005292 <USBD_StdEPReq+0xfe>
 8005266:	e02d      	b.n	80052c4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005268:	7bbb      	ldrb	r3, [r7, #14]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <USBD_StdEPReq+0xf4>
 800526e:	7bbb      	ldrb	r3, [r7, #14]
 8005270:	2b80      	cmp	r3, #128	; 0x80
 8005272:	d009      	beq.n	8005288 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005274:	7bbb      	ldrb	r3, [r7, #14]
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f001 f847 	bl	800630c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800527e:	2180      	movs	r1, #128	; 0x80
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f001 f843 	bl	800630c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005286:	e023      	b.n	80052d0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005288:	6839      	ldr	r1, [r7, #0]
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fc28 	bl	8005ae0 <USBD_CtlError>
        break;
 8005290:	e01e      	b.n	80052d0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	885b      	ldrh	r3, [r3, #2]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d119      	bne.n	80052ce <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800529a:	7bbb      	ldrb	r3, [r7, #14]
 800529c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80052a4:	7bbb      	ldrb	r3, [r7, #14]
 80052a6:	4619      	mov	r1, r3
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f001 f84e 	bl	800634a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fcc4 	bl	8005c3c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	6839      	ldr	r1, [r7, #0]
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	4798      	blx	r3
        }
        break;
 80052c2:	e004      	b.n	80052ce <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fc0a 	bl	8005ae0 <USBD_CtlError>
        break;
 80052cc:	e000      	b.n	80052d0 <USBD_StdEPReq+0x13c>
        break;
 80052ce:	bf00      	nop
      }
      break;
 80052d0:	e0aa      	b.n	8005428 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d002      	beq.n	80052e2 <USBD_StdEPReq+0x14e>
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d032      	beq.n	8005346 <USBD_StdEPReq+0x1b2>
 80052e0:	e097      	b.n	8005412 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052e2:	7bbb      	ldrb	r3, [r7, #14]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <USBD_StdEPReq+0x164>
 80052e8:	7bbb      	ldrb	r3, [r7, #14]
 80052ea:	2b80      	cmp	r3, #128	; 0x80
 80052ec:	d004      	beq.n	80052f8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fbf5 	bl	8005ae0 <USBD_CtlError>
          break;
 80052f6:	e091      	b.n	800541c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	da0b      	bge.n	8005318 <USBD_StdEPReq+0x184>
 8005300:	7bbb      	ldrb	r3, [r7, #14]
 8005302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	3310      	adds	r3, #16
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	4413      	add	r3, r2
 8005314:	3304      	adds	r3, #4
 8005316:	e00b      	b.n	8005330 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005318:	7bbb      	ldrb	r3, [r7, #14]
 800531a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	4413      	add	r3, r2
 800532e:	3304      	adds	r3, #4
 8005330:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2202      	movs	r2, #2
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fc3f 	bl	8005bc2 <USBD_CtlSendData>
        break;
 8005344:	e06a      	b.n	800541c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800534a:	2b00      	cmp	r3, #0
 800534c:	da11      	bge.n	8005372 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800534e:	7bbb      	ldrb	r3, [r7, #14]
 8005350:	f003 020f 	and.w	r2, r3, #15
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	3324      	adds	r3, #36	; 0x24
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d117      	bne.n	8005398 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fbb8 	bl	8005ae0 <USBD_CtlError>
            break;
 8005370:	e054      	b.n	800541c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005372:	7bbb      	ldrb	r3, [r7, #14]
 8005374:	f003 020f 	and.w	r2, r3, #15
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800538e:	6839      	ldr	r1, [r7, #0]
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fba5 	bl	8005ae0 <USBD_CtlError>
            break;
 8005396:	e041      	b.n	800541c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800539c:	2b00      	cmp	r3, #0
 800539e:	da0b      	bge.n	80053b8 <USBD_StdEPReq+0x224>
 80053a0:	7bbb      	ldrb	r3, [r7, #14]
 80053a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	3310      	adds	r3, #16
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	4413      	add	r3, r2
 80053b4:	3304      	adds	r3, #4
 80053b6:	e00b      	b.n	80053d0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80053b8:	7bbb      	ldrb	r3, [r7, #14]
 80053ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	4413      	add	r3, r2
 80053ce:	3304      	adds	r3, #4
 80053d0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80053d2:	7bbb      	ldrb	r3, [r7, #14]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <USBD_StdEPReq+0x24a>
 80053d8:	7bbb      	ldrb	r3, [r7, #14]
 80053da:	2b80      	cmp	r3, #128	; 0x80
 80053dc:	d103      	bne.n	80053e6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	e00e      	b.n	8005404 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80053e6:	7bbb      	ldrb	r3, [r7, #14]
 80053e8:	4619      	mov	r1, r3
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 ffcc 	bl	8006388 <USBD_LL_IsStallEP>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2201      	movs	r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	e002      	b.n	8005404 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2202      	movs	r2, #2
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fbd9 	bl	8005bc2 <USBD_CtlSendData>
          break;
 8005410:	e004      	b.n	800541c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fb63 	bl	8005ae0 <USBD_CtlError>
        break;
 800541a:	bf00      	nop
      }
      break;
 800541c:	e004      	b.n	8005428 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fb5d 	bl	8005ae0 <USBD_CtlError>
      break;
 8005426:	bf00      	nop
    }
    break;
 8005428:	e004      	b.n	8005434 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fb57 	bl	8005ae0 <USBD_CtlError>
    break;
 8005432:	bf00      	nop
  }

  return ret;
 8005434:	7bfb      	ldrb	r3, [r7, #15]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	885b      	ldrh	r3, [r3, #2]
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	2b0e      	cmp	r3, #14
 8005462:	f200 8152 	bhi.w	800570a <USBD_GetDescriptor+0x2ca>
 8005466:	a201      	add	r2, pc, #4	; (adr r2, 800546c <USBD_GetDescriptor+0x2c>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	080054dd 	.word	0x080054dd
 8005470:	080054f5 	.word	0x080054f5
 8005474:	08005535 	.word	0x08005535
 8005478:	0800570b 	.word	0x0800570b
 800547c:	0800570b 	.word	0x0800570b
 8005480:	080056ab 	.word	0x080056ab
 8005484:	080056d7 	.word	0x080056d7
 8005488:	0800570b 	.word	0x0800570b
 800548c:	0800570b 	.word	0x0800570b
 8005490:	0800570b 	.word	0x0800570b
 8005494:	0800570b 	.word	0x0800570b
 8005498:	0800570b 	.word	0x0800570b
 800549c:	0800570b 	.word	0x0800570b
 80054a0:	0800570b 	.word	0x0800570b
 80054a4:	080054a9 	.word	0x080054a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00b      	beq.n	80054cc <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	7c12      	ldrb	r2, [r2, #16]
 80054c0:	f107 0108 	add.w	r1, r7, #8
 80054c4:	4610      	mov	r0, r2
 80054c6:	4798      	blx	r3
 80054c8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80054ca:	e126      	b.n	800571a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fb06 	bl	8005ae0 <USBD_CtlError>
      err++;
 80054d4:	7afb      	ldrb	r3, [r7, #11]
 80054d6:	3301      	adds	r3, #1
 80054d8:	72fb      	strb	r3, [r7, #11]
    break;
 80054da:	e11e      	b.n	800571a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	7c12      	ldrb	r2, [r2, #16]
 80054e8:	f107 0108 	add.w	r1, r7, #8
 80054ec:	4610      	mov	r0, r2
 80054ee:	4798      	blx	r3
 80054f0:	60f8      	str	r0, [r7, #12]
    break;
 80054f2:	e112      	b.n	800571a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	7c1b      	ldrb	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10d      	bne.n	8005518 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005504:	f107 0208 	add.w	r2, r7, #8
 8005508:	4610      	mov	r0, r2
 800550a:	4798      	blx	r3
 800550c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3301      	adds	r3, #1
 8005512:	2202      	movs	r2, #2
 8005514:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005516:	e100      	b.n	800571a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	f107 0208 	add.w	r2, r7, #8
 8005524:	4610      	mov	r0, r2
 8005526:	4798      	blx	r3
 8005528:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3301      	adds	r3, #1
 800552e:	2202      	movs	r2, #2
 8005530:	701a      	strb	r2, [r3, #0]
    break;
 8005532:	e0f2      	b.n	800571a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	885b      	ldrh	r3, [r3, #2]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b05      	cmp	r3, #5
 800553c:	f200 80ac 	bhi.w	8005698 <USBD_GetDescriptor+0x258>
 8005540:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <USBD_GetDescriptor+0x108>)
 8005542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005546:	bf00      	nop
 8005548:	08005561 	.word	0x08005561
 800554c:	08005595 	.word	0x08005595
 8005550:	080055c9 	.word	0x080055c9
 8005554:	080055fd 	.word	0x080055fd
 8005558:	08005631 	.word	0x08005631
 800555c:	08005665 	.word	0x08005665
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	7c12      	ldrb	r2, [r2, #16]
 8005578:	f107 0108 	add.w	r1, r7, #8
 800557c:	4610      	mov	r0, r2
 800557e:	4798      	blx	r3
 8005580:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005582:	e091      	b.n	80056a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005584:	6839      	ldr	r1, [r7, #0]
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 faaa 	bl	8005ae0 <USBD_CtlError>
        err++;
 800558c:	7afb      	ldrb	r3, [r7, #11]
 800558e:	3301      	adds	r3, #1
 8005590:	72fb      	strb	r3, [r7, #11]
      break;
 8005592:	e089      	b.n	80056a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00b      	beq.n	80055b8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	7c12      	ldrb	r2, [r2, #16]
 80055ac:	f107 0108 	add.w	r1, r7, #8
 80055b0:	4610      	mov	r0, r2
 80055b2:	4798      	blx	r3
 80055b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80055b6:	e077      	b.n	80056a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fa90 	bl	8005ae0 <USBD_CtlError>
        err++;
 80055c0:	7afb      	ldrb	r3, [r7, #11]
 80055c2:	3301      	adds	r3, #1
 80055c4:	72fb      	strb	r3, [r7, #11]
      break;
 80055c6:	e06f      	b.n	80056a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00b      	beq.n	80055ec <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	7c12      	ldrb	r2, [r2, #16]
 80055e0:	f107 0108 	add.w	r1, r7, #8
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
 80055e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80055ea:	e05d      	b.n	80056a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fa76 	bl	8005ae0 <USBD_CtlError>
        err++;
 80055f4:	7afb      	ldrb	r3, [r7, #11]
 80055f6:	3301      	adds	r3, #1
 80055f8:	72fb      	strb	r3, [r7, #11]
      break;
 80055fa:	e055      	b.n	80056a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00b      	beq.n	8005620 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	7c12      	ldrb	r2, [r2, #16]
 8005614:	f107 0108 	add.w	r1, r7, #8
 8005618:	4610      	mov	r0, r2
 800561a:	4798      	blx	r3
 800561c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800561e:	e043      	b.n	80056a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa5c 	bl	8005ae0 <USBD_CtlError>
        err++;
 8005628:	7afb      	ldrb	r3, [r7, #11]
 800562a:	3301      	adds	r3, #1
 800562c:	72fb      	strb	r3, [r7, #11]
      break;
 800562e:	e03b      	b.n	80056a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	7c12      	ldrb	r2, [r2, #16]
 8005648:	f107 0108 	add.w	r1, r7, #8
 800564c:	4610      	mov	r0, r2
 800564e:	4798      	blx	r3
 8005650:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005652:	e029      	b.n	80056a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa42 	bl	8005ae0 <USBD_CtlError>
        err++;
 800565c:	7afb      	ldrb	r3, [r7, #11]
 800565e:	3301      	adds	r3, #1
 8005660:	72fb      	strb	r3, [r7, #11]
      break;
 8005662:	e021      	b.n	80056a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00b      	beq.n	8005688 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	7c12      	ldrb	r2, [r2, #16]
 800567c:	f107 0108 	add.w	r1, r7, #8
 8005680:	4610      	mov	r0, r2
 8005682:	4798      	blx	r3
 8005684:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005686:	e00f      	b.n	80056a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa28 	bl	8005ae0 <USBD_CtlError>
        err++;
 8005690:	7afb      	ldrb	r3, [r7, #11]
 8005692:	3301      	adds	r3, #1
 8005694:	72fb      	strb	r3, [r7, #11]
      break;
 8005696:	e007      	b.n	80056a8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fa20 	bl	8005ae0 <USBD_CtlError>
      err++;
 80056a0:	7afb      	ldrb	r3, [r7, #11]
 80056a2:	3301      	adds	r3, #1
 80056a4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80056a6:	bf00      	nop
    }
    break;
 80056a8:	e037      	b.n	800571a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	7c1b      	ldrb	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ba:	f107 0208 	add.w	r2, r7, #8
 80056be:	4610      	mov	r0, r2
 80056c0:	4798      	blx	r3
 80056c2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80056c4:	e029      	b.n	800571a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fa09 	bl	8005ae0 <USBD_CtlError>
      err++;
 80056ce:	7afb      	ldrb	r3, [r7, #11]
 80056d0:	3301      	adds	r3, #1
 80056d2:	72fb      	strb	r3, [r7, #11]
    break;
 80056d4:	e021      	b.n	800571a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	7c1b      	ldrb	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10d      	bne.n	80056fa <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	f107 0208 	add.w	r2, r7, #8
 80056ea:	4610      	mov	r0, r2
 80056ec:	4798      	blx	r3
 80056ee:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3301      	adds	r3, #1
 80056f4:	2207      	movs	r2, #7
 80056f6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80056f8:	e00f      	b.n	800571a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80056fa:	6839      	ldr	r1, [r7, #0]
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f9ef 	bl	8005ae0 <USBD_CtlError>
      err++;
 8005702:	7afb      	ldrb	r3, [r7, #11]
 8005704:	3301      	adds	r3, #1
 8005706:	72fb      	strb	r3, [r7, #11]
    break;
 8005708:	e007      	b.n	800571a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800570a:	6839      	ldr	r1, [r7, #0]
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f9e7 	bl	8005ae0 <USBD_CtlError>
    err++;
 8005712:	7afb      	ldrb	r3, [r7, #11]
 8005714:	3301      	adds	r3, #1
 8005716:	72fb      	strb	r3, [r7, #11]
    break;
 8005718:	bf00      	nop
  }

  if (err != 0U)
 800571a:	7afb      	ldrb	r3, [r7, #11]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d11e      	bne.n	800575e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	88db      	ldrh	r3, [r3, #6]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d016      	beq.n	8005756 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8005728:	893b      	ldrh	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00e      	beq.n	800574c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	88da      	ldrh	r2, [r3, #6]
 8005732:	893b      	ldrh	r3, [r7, #8]
 8005734:	4293      	cmp	r3, r2
 8005736:	bf28      	it	cs
 8005738:	4613      	movcs	r3, r2
 800573a:	b29b      	uxth	r3, r3
 800573c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800573e:	893b      	ldrh	r3, [r7, #8]
 8005740:	461a      	mov	r2, r3
 8005742:	68f9      	ldr	r1, [r7, #12]
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fa3c 	bl	8005bc2 <USBD_CtlSendData>
 800574a:	e009      	b.n	8005760 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f9c6 	bl	8005ae0 <USBD_CtlError>
 8005754:	e004      	b.n	8005760 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fa70 	bl	8005c3c <USBD_CtlSendStatus>
 800575c:	e000      	b.n	8005760 <USBD_GetDescriptor+0x320>
    return;
 800575e:	bf00      	nop
    }
  }
}
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop

08005768 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	889b      	ldrh	r3, [r3, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d130      	bne.n	80057dc <USBD_SetAddress+0x74>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	88db      	ldrh	r3, [r3, #6]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d12c      	bne.n	80057dc <USBD_SetAddress+0x74>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	885b      	ldrh	r3, [r3, #2]
 8005786:	2b7f      	cmp	r3, #127	; 0x7f
 8005788:	d828      	bhi.n	80057dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	885b      	ldrh	r3, [r3, #2]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005794:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800579c:	2b03      	cmp	r3, #3
 800579e:	d104      	bne.n	80057aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80057a0:	6839      	ldr	r1, [r7, #0]
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f99c 	bl	8005ae0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057a8:	e01c      	b.n	80057e4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	7bfa      	ldrb	r2, [r7, #15]
 80057ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fe12 	bl	80063e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fa3d 	bl	8005c3c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d004      	beq.n	80057d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d0:	e008      	b.n	80057e4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057da:	e003      	b.n	80057e4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f97e 	bl	8005ae0 <USBD_CtlError>
  }
}
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	885b      	ldrh	r3, [r3, #2]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	4b4b      	ldr	r3, [pc, #300]	; (8005930 <USBD_SetConfig+0x144>)
 8005802:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005804:	4b4a      	ldr	r3, [pc, #296]	; (8005930 <USBD_SetConfig+0x144>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d905      	bls.n	8005818 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f966 	bl	8005ae0 <USBD_CtlError>
    return USBD_FAIL;
 8005814:	2303      	movs	r3, #3
 8005816:	e087      	b.n	8005928 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800581e:	2b02      	cmp	r3, #2
 8005820:	d002      	beq.n	8005828 <USBD_SetConfig+0x3c>
 8005822:	2b03      	cmp	r3, #3
 8005824:	d025      	beq.n	8005872 <USBD_SetConfig+0x86>
 8005826:	e071      	b.n	800590c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005828:	4b41      	ldr	r3, [pc, #260]	; (8005930 <USBD_SetConfig+0x144>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01c      	beq.n	800586a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005830:	4b3f      	ldr	r3, [pc, #252]	; (8005930 <USBD_SetConfig+0x144>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800583a:	4b3d      	ldr	r3, [pc, #244]	; (8005930 <USBD_SetConfig+0x144>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff f97d 	bl	8004b40 <USBD_SetClassConfig>
 8005846:	4603      	mov	r3, r0
 8005848:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d004      	beq.n	800585a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f944 	bl	8005ae0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005858:	e065      	b.n	8005926 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f9ee 	bl	8005c3c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2203      	movs	r2, #3
 8005864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005868:	e05d      	b.n	8005926 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f9e6 	bl	8005c3c <USBD_CtlSendStatus>
    break;
 8005870:	e059      	b.n	8005926 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005872:	4b2f      	ldr	r3, [pc, #188]	; (8005930 <USBD_SetConfig+0x144>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d112      	bne.n	80058a0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2202      	movs	r2, #2
 800587e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005882:	4b2b      	ldr	r3, [pc, #172]	; (8005930 <USBD_SetConfig+0x144>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800588c:	4b28      	ldr	r3, [pc, #160]	; (8005930 <USBD_SetConfig+0x144>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	4619      	mov	r1, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff f970 	bl	8004b78 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f9cf 	bl	8005c3c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800589e:	e042      	b.n	8005926 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80058a0:	4b23      	ldr	r3, [pc, #140]	; (8005930 <USBD_SetConfig+0x144>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d02a      	beq.n	8005904 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff f95e 	bl	8004b78 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80058bc:	4b1c      	ldr	r3, [pc, #112]	; (8005930 <USBD_SetConfig+0x144>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80058c6:	4b1a      	ldr	r3, [pc, #104]	; (8005930 <USBD_SetConfig+0x144>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff f937 	bl	8004b40 <USBD_SetClassConfig>
 80058d2:	4603      	mov	r3, r0
 80058d4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00f      	beq.n	80058fc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f8fe 	bl	8005ae0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff f943 	bl	8004b78 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80058fa:	e014      	b.n	8005926 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f99d 	bl	8005c3c <USBD_CtlSendStatus>
    break;
 8005902:	e010      	b.n	8005926 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f999 	bl	8005c3c <USBD_CtlSendStatus>
    break;
 800590a:	e00c      	b.n	8005926 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f8e6 	bl	8005ae0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005914:	4b06      	ldr	r3, [pc, #24]	; (8005930 <USBD_SetConfig+0x144>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff f92c 	bl	8004b78 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005920:	2303      	movs	r3, #3
 8005922:	73fb      	strb	r3, [r7, #15]
    break;
 8005924:	bf00      	nop
  }

  return ret;
 8005926:	7bfb      	ldrb	r3, [r7, #15]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20000139 	.word	0x20000139

08005934 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	88db      	ldrh	r3, [r3, #6]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d004      	beq.n	8005950 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f8c9 	bl	8005ae0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800594e:	e021      	b.n	8005994 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005956:	2b01      	cmp	r3, #1
 8005958:	db17      	blt.n	800598a <USBD_GetConfig+0x56>
 800595a:	2b02      	cmp	r3, #2
 800595c:	dd02      	ble.n	8005964 <USBD_GetConfig+0x30>
 800595e:	2b03      	cmp	r3, #3
 8005960:	d00b      	beq.n	800597a <USBD_GetConfig+0x46>
 8005962:	e012      	b.n	800598a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3308      	adds	r3, #8
 800596e:	2201      	movs	r2, #1
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f925 	bl	8005bc2 <USBD_CtlSendData>
      break;
 8005978:	e00c      	b.n	8005994 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3304      	adds	r3, #4
 800597e:	2201      	movs	r2, #1
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f91d 	bl	8005bc2 <USBD_CtlSendData>
      break;
 8005988:	e004      	b.n	8005994 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8a7 	bl	8005ae0 <USBD_CtlError>
      break;
 8005992:	bf00      	nop
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ac:	3b01      	subs	r3, #1
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d81e      	bhi.n	80059f0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	88db      	ldrh	r3, [r3, #6]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d004      	beq.n	80059c4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f88f 	bl	8005ae0 <USBD_CtlError>
      break;
 80059c2:	e01a      	b.n	80059fa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f043 0202 	orr.w	r2, r3, #2
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	330c      	adds	r3, #12
 80059e4:	2202      	movs	r2, #2
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f8ea 	bl	8005bc2 <USBD_CtlSendData>
    break;
 80059ee:	e004      	b.n	80059fa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f874 	bl	8005ae0 <USBD_CtlError>
    break;
 80059f8:	bf00      	nop
  }
}
 80059fa:	bf00      	nop
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	885b      	ldrh	r3, [r3, #2]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d106      	bne.n	8005a22 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f90d 	bl	8005c3c <USBD_CtlSendStatus>
  }
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b082      	sub	sp, #8
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d80b      	bhi.n	8005a58 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	885b      	ldrh	r3, [r3, #2]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d10c      	bne.n	8005a62 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f8f3 	bl	8005c3c <USBD_CtlSendStatus>
      }
      break;
 8005a56:	e004      	b.n	8005a62 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005a58:	6839      	ldr	r1, [r7, #0]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f840 	bl	8005ae0 <USBD_CtlError>
      break;
 8005a60:	e000      	b.n	8005a64 <USBD_ClrFeature+0x3a>
      break;
 8005a62:	bf00      	nop
  }
}
 8005a64:	bf00      	nop
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	781a      	ldrb	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3301      	adds	r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3301      	adds	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff faa9 	bl	8004fee <SWAPBYTE>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3301      	adds	r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff fa9c 	bl	8004fee <SWAPBYTE>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	461a      	mov	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7ff fa8f 	bl	8004fee <SWAPBYTE>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	80da      	strh	r2, [r3, #6]
}
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005aea:	2180      	movs	r1, #128	; 0x80
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fc0d 	bl	800630c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005af2:	2100      	movs	r1, #0
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fc09 	bl	800630c <USBD_LL_StallEP>
}
 8005afa:	bf00      	nop
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b086      	sub	sp, #24
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d036      	beq.n	8005b86 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005b1c:	6938      	ldr	r0, [r7, #16]
 8005b1e:	f000 f836 	bl	8005b8e <USBD_GetLen>
 8005b22:	4603      	mov	r3, r0
 8005b24:	3301      	adds	r3, #1
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	4413      	add	r3, r2
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	7812      	ldrb	r2, [r2, #0]
 8005b3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	4413      	add	r3, r2
 8005b48:	2203      	movs	r2, #3
 8005b4a:	701a      	strb	r2, [r3, #0]
  idx++;
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005b52:	e013      	b.n	8005b7c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005b54:	7dfb      	ldrb	r3, [r7, #23]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	4413      	add	r3, r2
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	7812      	ldrb	r2, [r2, #0]
 8005b5e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	3301      	adds	r3, #1
 8005b64:	613b      	str	r3, [r7, #16]
    idx++;
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	4413      	add	r3, r2
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]
    idx++;
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e7      	bne.n	8005b54 <USBD_GetString+0x52>
 8005b84:	e000      	b.n	8005b88 <USBD_GetString+0x86>
    return;
 8005b86:	bf00      	nop
  }
}
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005b9e:	e005      	b.n	8005bac <USBD_GetLen+0x1e>
  {
    len++;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1f5      	bne.n	8005ba0 <USBD_GetLen+0x12>
  }

  return len;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	2100      	movs	r1, #0
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 fc18 	bl	800641e <USBD_LL_Transmit>

  return USBD_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	2100      	movs	r1, #0
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fc07 	bl	800641e <USBD_LL_Transmit>

  return USBD_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fc17 	bl	8006460 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2204      	movs	r2, #4
 8005c48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2100      	movs	r1, #0
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fbe3 	bl	800641e <USBD_LL_Transmit>

  return USBD_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b082      	sub	sp, #8
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2205      	movs	r2, #5
 8005c6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c72:	2300      	movs	r3, #0
 8005c74:	2200      	movs	r2, #0
 8005c76:	2100      	movs	r1, #0
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fbf1 	bl	8006460 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4912      	ldr	r1, [pc, #72]	; (8005cd8 <MX_USB_DEVICE_Init+0x50>)
 8005c90:	4812      	ldr	r0, [pc, #72]	; (8005cdc <MX_USB_DEVICE_Init+0x54>)
 8005c92:	f7fe fee7 	bl	8004a64 <USBD_Init>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005c9c:	f7fa fce4 	bl	8000668 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 8005ca0:	490f      	ldr	r1, [pc, #60]	; (8005ce0 <MX_USB_DEVICE_Init+0x58>)
 8005ca2:	480e      	ldr	r0, [pc, #56]	; (8005cdc <MX_USB_DEVICE_Init+0x54>)
 8005ca4:	f7fe ff14 	bl	8004ad0 <USBD_RegisterClass>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005cae:	f7fa fcdb 	bl	8000668 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005cb2:	490c      	ldr	r1, [pc, #48]	; (8005ce4 <MX_USB_DEVICE_Init+0x5c>)
 8005cb4:	4809      	ldr	r0, [pc, #36]	; (8005cdc <MX_USB_DEVICE_Init+0x54>)
 8005cb6:	f7fe fe33 	bl	8004920 <USBD_AUDIO_RegisterInterface>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005cc0:	f7fa fcd2 	bl	8000668 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005cc4:	4805      	ldr	r0, [pc, #20]	; (8005cdc <MX_USB_DEVICE_Init+0x54>)
 8005cc6:	f7fe ff24 	bl	8004b12 <USBD_Start>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005cd0:	f7fa fcca 	bl	8000668 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005cd4:	bf00      	nop
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	200000b4 	.word	0x200000b4
 8005cdc:	20000288 	.word	0x20000288
 8005ce0:	20000014 	.word	0x20000014
 8005ce4:	20000004 	.word	0x20000004

08005ce8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	6039      	str	r1, [r7, #0]
 8005cf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2212      	movs	r2, #18
 8005cf8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005cfa:	4b03      	ldr	r3, [pc, #12]	; (8005d08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	200000d4 	.word	0x200000d4

08005d0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	6039      	str	r1, [r7, #0]
 8005d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005d1e:	4b03      	ldr	r3, [pc, #12]	; (8005d2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	200000f4 	.word	0x200000f4

08005d30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	6039      	str	r1, [r7, #0]
 8005d3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d105      	bne.n	8005d4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	4907      	ldr	r1, [pc, #28]	; (8005d64 <USBD_FS_ProductStrDescriptor+0x34>)
 8005d46:	4808      	ldr	r0, [pc, #32]	; (8005d68 <USBD_FS_ProductStrDescriptor+0x38>)
 8005d48:	f7ff fedb 	bl	8005b02 <USBD_GetString>
 8005d4c:	e004      	b.n	8005d58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	4904      	ldr	r1, [pc, #16]	; (8005d64 <USBD_FS_ProductStrDescriptor+0x34>)
 8005d52:	4805      	ldr	r0, [pc, #20]	; (8005d68 <USBD_FS_ProductStrDescriptor+0x38>)
 8005d54:	f7ff fed5 	bl	8005b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d58:	4b02      	ldr	r3, [pc, #8]	; (8005d64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000558 	.word	0x20000558
 8005d68:	08006608 	.word	0x08006608

08005d6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	4603      	mov	r3, r0
 8005d74:	6039      	str	r1, [r7, #0]
 8005d76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	4904      	ldr	r1, [pc, #16]	; (8005d8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005d7c:	4804      	ldr	r0, [pc, #16]	; (8005d90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005d7e:	f7ff fec0 	bl	8005b02 <USBD_GetString>
  return USBD_StrDesc;
 8005d82:	4b02      	ldr	r3, [pc, #8]	; (8005d8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	20000558 	.word	0x20000558
 8005d90:	08006614 	.word	0x08006614

08005d94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	6039      	str	r1, [r7, #0]
 8005d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	221a      	movs	r2, #26
 8005da4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005da6:	f000 f855 	bl	8005e54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005daa:	4b02      	ldr	r3, [pc, #8]	; (8005db4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	200000f8 	.word	0x200000f8

08005db8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	6039      	str	r1, [r7, #0]
 8005dc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d105      	bne.n	8005dd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	4907      	ldr	r1, [pc, #28]	; (8005dec <USBD_FS_ConfigStrDescriptor+0x34>)
 8005dce:	4808      	ldr	r0, [pc, #32]	; (8005df0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005dd0:	f7ff fe97 	bl	8005b02 <USBD_GetString>
 8005dd4:	e004      	b.n	8005de0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	4904      	ldr	r1, [pc, #16]	; (8005dec <USBD_FS_ConfigStrDescriptor+0x34>)
 8005dda:	4805      	ldr	r0, [pc, #20]	; (8005df0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005ddc:	f7ff fe91 	bl	8005b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005de0:	4b02      	ldr	r3, [pc, #8]	; (8005dec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20000558 	.word	0x20000558
 8005df0:	08006624 	.word	0x08006624

08005df4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	6039      	str	r1, [r7, #0]
 8005dfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d105      	bne.n	8005e12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	4907      	ldr	r1, [pc, #28]	; (8005e28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e0a:	4808      	ldr	r0, [pc, #32]	; (8005e2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e0c:	f7ff fe79 	bl	8005b02 <USBD_GetString>
 8005e10:	e004      	b.n	8005e1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	4904      	ldr	r1, [pc, #16]	; (8005e28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e16:	4805      	ldr	r0, [pc, #20]	; (8005e2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e18:	f7ff fe73 	bl	8005b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e1c:	4b02      	ldr	r3, [pc, #8]	; (8005e28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000558 	.word	0x20000558
 8005e2c:	08006630 	.word	0x08006630

08005e30 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	6039      	str	r1, [r7, #0]
 8005e3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	220c      	movs	r2, #12
 8005e40:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8005e42:	4b03      	ldr	r3, [pc, #12]	; (8005e50 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	200000e8 	.word	0x200000e8

08005e54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005e5a:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <Get_SerialNum+0x44>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005e60:	4b0e      	ldr	r3, [pc, #56]	; (8005e9c <Get_SerialNum+0x48>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005e66:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <Get_SerialNum+0x4c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4413      	add	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d009      	beq.n	8005e8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005e7a:	2208      	movs	r2, #8
 8005e7c:	4909      	ldr	r1, [pc, #36]	; (8005ea4 <Get_SerialNum+0x50>)
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 f814 	bl	8005eac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005e84:	2204      	movs	r2, #4
 8005e86:	4908      	ldr	r1, [pc, #32]	; (8005ea8 <Get_SerialNum+0x54>)
 8005e88:	68b8      	ldr	r0, [r7, #8]
 8005e8a:	f000 f80f 	bl	8005eac <IntToUnicode>
  }
}
 8005e8e:	bf00      	nop
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	1fff7a10 	.word	0x1fff7a10
 8005e9c:	1fff7a14 	.word	0x1fff7a14
 8005ea0:	1fff7a18 	.word	0x1fff7a18
 8005ea4:	200000fa 	.word	0x200000fa
 8005ea8:	2000010a 	.word	0x2000010a

08005eac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	75fb      	strb	r3, [r7, #23]
 8005ec2:	e027      	b.n	8005f14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	0f1b      	lsrs	r3, r3, #28
 8005ec8:	2b09      	cmp	r3, #9
 8005eca:	d80b      	bhi.n	8005ee4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	0f1b      	lsrs	r3, r3, #28
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	440b      	add	r3, r1
 8005edc:	3230      	adds	r2, #48	; 0x30
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	701a      	strb	r2, [r3, #0]
 8005ee2:	e00a      	b.n	8005efa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	0f1b      	lsrs	r3, r3, #28
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	4619      	mov	r1, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	440b      	add	r3, r1
 8005ef4:	3237      	adds	r2, #55	; 0x37
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	3301      	adds	r3, #1
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	4413      	add	r3, r2
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	3301      	adds	r3, #1
 8005f12:	75fb      	strb	r3, [r7, #23]
 8005f14:	7dfa      	ldrb	r2, [r7, #23]
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d3d3      	bcc.n	8005ec4 <IntToUnicode+0x18>
  }
}
 8005f1c:	bf00      	nop
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08a      	sub	sp, #40	; 0x28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f30:	f107 0314 	add.w	r3, r7, #20
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	605a      	str	r2, [r3, #4]
 8005f3a:	609a      	str	r2, [r3, #8]
 8005f3c:	60da      	str	r2, [r3, #12]
 8005f3e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f48:	d13a      	bne.n	8005fc0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	4b1e      	ldr	r3, [pc, #120]	; (8005fc8 <HAL_PCD_MspInit+0xa0>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	4a1d      	ldr	r2, [pc, #116]	; (8005fc8 <HAL_PCD_MspInit+0xa0>)
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5a:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <HAL_PCD_MspInit+0xa0>)
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005f66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f74:	2303      	movs	r3, #3
 8005f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005f78:	230a      	movs	r3, #10
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f7c:	f107 0314 	add.w	r3, r7, #20
 8005f80:	4619      	mov	r1, r3
 8005f82:	4812      	ldr	r0, [pc, #72]	; (8005fcc <HAL_PCD_MspInit+0xa4>)
 8005f84:	f7fa fe5e 	bl	8000c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005f88:	4b0f      	ldr	r3, [pc, #60]	; (8005fc8 <HAL_PCD_MspInit+0xa0>)
 8005f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8c:	4a0e      	ldr	r2, [pc, #56]	; (8005fc8 <HAL_PCD_MspInit+0xa0>)
 8005f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f92:	6353      	str	r3, [r2, #52]	; 0x34
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <HAL_PCD_MspInit+0xa0>)
 8005f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9c:	4a0a      	ldr	r2, [pc, #40]	; (8005fc8 <HAL_PCD_MspInit+0xa0>)
 8005f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fa2:	6453      	str	r3, [r2, #68]	; 0x44
 8005fa4:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <HAL_PCD_MspInit+0xa0>)
 8005fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	2043      	movs	r0, #67	; 0x43
 8005fb6:	f7fa fe0e 	bl	8000bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005fba:	2043      	movs	r0, #67	; 0x43
 8005fbc:	f7fa fe27 	bl	8000c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005fc0:	bf00      	nop
 8005fc2:	3728      	adds	r7, #40	; 0x28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	40020000 	.word	0x40020000

08005fd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	f7fe fdde 	bl	8004ba8 <USBD_LL_SetupStage>
}
 8005fec:	bf00      	nop
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006006:	78fa      	ldrb	r2, [r7, #3]
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	4619      	mov	r1, r3
 800601e:	f7fe fe16 	bl	8004c4e <USBD_LL_DataOutStage>
}
 8006022:	bf00      	nop
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	460b      	mov	r3, r1
 8006034:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4613      	mov	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	3348      	adds	r3, #72	; 0x48
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	4619      	mov	r1, r3
 8006052:	f7fe fe5f 	bl	8004d14 <USBD_LL_DataInStage>
}
 8006056:	bf00      	nop
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800606c:	4618      	mov	r0, r3
 800606e:	f7fe ff63 	bl	8004f38 <USBD_LL_SOF>
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006082:	2301      	movs	r3, #1
 8006084:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800608e:	2300      	movs	r3, #0
 8006090:	73fb      	strb	r3, [r7, #15]
 8006092:	e008      	b.n	80060a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d102      	bne.n	80060a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
 80060a0:	e001      	b.n	80060a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80060a2:	f7fa fae1 	bl	8000668 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060ac:	7bfa      	ldrb	r2, [r7, #15]
 80060ae:	4611      	mov	r1, r2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe ff06 	bl	8004ec2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fe febf 	bl	8004e40 <USBD_LL_Reset>
}
 80060c2:	bf00      	nop
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe ff01 	bl	8004ee2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060f2:	f043 0301 	orr.w	r3, r3, #1
 80060f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d005      	beq.n	800610c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006100:	4b04      	ldr	r3, [pc, #16]	; (8006114 <HAL_PCD_SuspendCallback+0x48>)
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	4a03      	ldr	r2, [pc, #12]	; (8006114 <HAL_PCD_SuspendCallback+0x48>)
 8006106:	f043 0306 	orr.w	r3, r3, #6
 800610a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	e000ed00 	.word	0xe000ed00

08006118 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fef0 	bl	8004f0c <USBD_LL_Resume>
}
 800612c:	bf00      	nop
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006146:	78fa      	ldrb	r2, [r7, #3]
 8006148:	4611      	mov	r1, r2
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe ff1b 	bl	8004f86 <USBD_LL_IsoOUTIncomplete>
}
 8006150:	bf00      	nop
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800616a:	78fa      	ldrb	r2, [r7, #3]
 800616c:	4611      	mov	r1, r2
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe fefc 	bl	8004f6c <USBD_LL_IsoINIncomplete>
}
 8006174:	bf00      	nop
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe ff08 	bl	8004fa0 <USBD_LL_DevConnected>
}
 8006190:	bf00      	nop
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe ff05 	bl	8004fb6 <USBD_LL_DevDisconnected>
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d13c      	bne.n	800623e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80061c4:	4a20      	ldr	r2, [pc, #128]	; (8006248 <USBD_LL_Init+0x94>)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a1e      	ldr	r2, [pc, #120]	; (8006248 <USBD_LL_Init+0x94>)
 80061d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80061d4:	4b1c      	ldr	r3, [pc, #112]	; (8006248 <USBD_LL_Init+0x94>)
 80061d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80061da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80061dc:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <USBD_LL_Init+0x94>)
 80061de:	2206      	movs	r2, #6
 80061e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80061e2:	4b19      	ldr	r3, [pc, #100]	; (8006248 <USBD_LL_Init+0x94>)
 80061e4:	2202      	movs	r2, #2
 80061e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80061e8:	4b17      	ldr	r3, [pc, #92]	; (8006248 <USBD_LL_Init+0x94>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80061ee:	4b16      	ldr	r3, [pc, #88]	; (8006248 <USBD_LL_Init+0x94>)
 80061f0:	2202      	movs	r2, #2
 80061f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80061f4:	4b14      	ldr	r3, [pc, #80]	; (8006248 <USBD_LL_Init+0x94>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80061fa:	4b13      	ldr	r3, [pc, #76]	; (8006248 <USBD_LL_Init+0x94>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006200:	4b11      	ldr	r3, [pc, #68]	; (8006248 <USBD_LL_Init+0x94>)
 8006202:	2200      	movs	r2, #0
 8006204:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006206:	4b10      	ldr	r3, [pc, #64]	; (8006248 <USBD_LL_Init+0x94>)
 8006208:	2200      	movs	r2, #0
 800620a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800620c:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <USBD_LL_Init+0x94>)
 800620e:	2200      	movs	r2, #0
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006212:	480d      	ldr	r0, [pc, #52]	; (8006248 <USBD_LL_Init+0x94>)
 8006214:	f7fa fea8 	bl	8000f68 <HAL_PCD_Init>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800621e:	f7fa fa23 	bl	8000668 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006222:	2180      	movs	r1, #128	; 0x80
 8006224:	4808      	ldr	r0, [pc, #32]	; (8006248 <USBD_LL_Init+0x94>)
 8006226:	f7fc f822 	bl	800226e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800622a:	2240      	movs	r2, #64	; 0x40
 800622c:	2100      	movs	r1, #0
 800622e:	4806      	ldr	r0, [pc, #24]	; (8006248 <USBD_LL_Init+0x94>)
 8006230:	f7fb ffd6 	bl	80021e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006234:	2280      	movs	r2, #128	; 0x80
 8006236:	2101      	movs	r1, #1
 8006238:	4803      	ldr	r0, [pc, #12]	; (8006248 <USBD_LL_Init+0x94>)
 800623a:	f7fb ffd1 	bl	80021e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20000758 	.word	0x20000758

0800624c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006262:	4618      	mov	r0, r3
 8006264:	f7fa ffa4 	bl	80011b0 <HAL_PCD_Start>
 8006268:	4603      	mov	r3, r0
 800626a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	4618      	mov	r0, r3
 8006270:	f000 f966 	bl	8006540 <USBD_Get_USB_Status>
 8006274:	4603      	mov	r3, r0
 8006276:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006278:	7bbb      	ldrb	r3, [r7, #14]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	4608      	mov	r0, r1
 800628c:	4611      	mov	r1, r2
 800628e:	461a      	mov	r2, r3
 8006290:	4603      	mov	r3, r0
 8006292:	70fb      	strb	r3, [r7, #3]
 8006294:	460b      	mov	r3, r1
 8006296:	70bb      	strb	r3, [r7, #2]
 8006298:	4613      	mov	r3, r2
 800629a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80062aa:	78bb      	ldrb	r3, [r7, #2]
 80062ac:	883a      	ldrh	r2, [r7, #0]
 80062ae:	78f9      	ldrb	r1, [r7, #3]
 80062b0:	f7fb fbb5 	bl	8001a1e <HAL_PCD_EP_Open>
 80062b4:	4603      	mov	r3, r0
 80062b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 f940 	bl	8006540 <USBD_Get_USB_Status>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	460b      	mov	r3, r1
 80062d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062e8:	78fa      	ldrb	r2, [r7, #3]
 80062ea:	4611      	mov	r1, r2
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fb fbfe 	bl	8001aee <HAL_PCD_EP_Close>
 80062f2:	4603      	mov	r3, r0
 80062f4:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 f921 	bl	8006540 <USBD_Get_USB_Status>
 80062fe:	4603      	mov	r3, r0
 8006300:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006302:	7bbb      	ldrb	r3, [r7, #14]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006326:	78fa      	ldrb	r2, [r7, #3]
 8006328:	4611      	mov	r1, r2
 800632a:	4618      	mov	r0, r3
 800632c:	f7fb fcbe 	bl	8001cac <HAL_PCD_EP_SetStall>
 8006330:	4603      	mov	r3, r0
 8006332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	4618      	mov	r0, r3
 8006338:	f000 f902 	bl	8006540 <USBD_Get_USB_Status>
 800633c:	4603      	mov	r3, r0
 800633e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006340:	7bbb      	ldrb	r3, [r7, #14]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006364:	78fa      	ldrb	r2, [r7, #3]
 8006366:	4611      	mov	r1, r2
 8006368:	4618      	mov	r0, r3
 800636a:	f7fb fd03 	bl	8001d74 <HAL_PCD_EP_ClrStall>
 800636e:	4603      	mov	r3, r0
 8006370:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	4618      	mov	r0, r3
 8006376:	f000 f8e3 	bl	8006540 <USBD_Get_USB_Status>
 800637a:	4603      	mov	r3, r0
 800637c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800637e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800639a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800639c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	da0b      	bge.n	80063bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	4613      	mov	r3, r2
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	1a9b      	subs	r3, r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	440b      	add	r3, r1
 80063b6:	333e      	adds	r3, #62	; 0x3e
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	e00b      	b.n	80063d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063c2:	68f9      	ldr	r1, [r7, #12]
 80063c4:	4613      	mov	r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	1a9b      	subs	r3, r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	440b      	add	r3, r1
 80063ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80063d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063fa:	78fa      	ldrb	r2, [r7, #3]
 80063fc:	4611      	mov	r1, r2
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fb fae8 	bl	80019d4 <HAL_PCD_SetAddress>
 8006404:	4603      	mov	r3, r0
 8006406:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	4618      	mov	r0, r3
 800640c:	f000 f898 	bl	8006540 <USBD_Get_USB_Status>
 8006410:	4603      	mov	r3, r0
 8006412:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006414:	7bbb      	ldrb	r3, [r7, #14]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b086      	sub	sp, #24
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
 800642a:	460b      	mov	r3, r1
 800642c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800643c:	7af9      	ldrb	r1, [r7, #11]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	f7fb fbe9 	bl	8001c18 <HAL_PCD_EP_Transmit>
 8006446:	4603      	mov	r3, r0
 8006448:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	4618      	mov	r0, r3
 800644e:	f000 f877 	bl	8006540 <USBD_Get_USB_Status>
 8006452:	4603      	mov	r3, r0
 8006454:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006456:	7dbb      	ldrb	r3, [r7, #22]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	607a      	str	r2, [r7, #4]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	460b      	mov	r3, r1
 800646e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800647e:	7af9      	ldrb	r1, [r7, #11]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	f7fb fb7d 	bl	8001b82 <HAL_PCD_EP_Receive>
 8006488:	4603      	mov	r3, r0
 800648a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800648c:	7dfb      	ldrb	r3, [r7, #23]
 800648e:	4618      	mov	r0, r3
 8006490:	f000 f856 	bl	8006540 <USBD_Get_USB_Status>
 8006494:	4603      	mov	r3, r0
 8006496:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8006498:	7dbb      	ldrb	r3, [r7, #22]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <HAL_PCDEx_LPM_Callback+0x18>
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d01f      	beq.n	80064fa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80064ba:	e03b      	b.n	8006534 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d007      	beq.n	80064d4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80064c4:	f7fa f82a 	bl	800051c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80064c8:	4b1c      	ldr	r3, [pc, #112]	; (800653c <HAL_PCDEx_LPM_Callback+0x98>)
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	4a1b      	ldr	r2, [pc, #108]	; (800653c <HAL_PCDEx_LPM_Callback+0x98>)
 80064ce:	f023 0306 	bic.w	r3, r3, #6
 80064d2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6812      	ldr	r2, [r2, #0]
 80064e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064e6:	f023 0301 	bic.w	r3, r3, #1
 80064ea:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe fd0a 	bl	8004f0c <USBD_LL_Resume>
    break;
 80064f8:	e01c      	b.n	8006534 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800650c:	f043 0301 	orr.w	r3, r3, #1
 8006510:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006518:	4618      	mov	r0, r3
 800651a:	f7fe fce2 	bl	8004ee2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d005      	beq.n	8006532 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006526:	4b05      	ldr	r3, [pc, #20]	; (800653c <HAL_PCDEx_LPM_Callback+0x98>)
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	4a04      	ldr	r2, [pc, #16]	; (800653c <HAL_PCDEx_LPM_Callback+0x98>)
 800652c:	f043 0306 	orr.w	r3, r3, #6
 8006530:	6113      	str	r3, [r2, #16]
    break;   
 8006532:	bf00      	nop
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	e000ed00 	.word	0xe000ed00

08006540 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	4603      	mov	r3, r0
 8006548:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	2b03      	cmp	r3, #3
 8006552:	d817      	bhi.n	8006584 <USBD_Get_USB_Status+0x44>
 8006554:	a201      	add	r2, pc, #4	; (adr r2, 800655c <USBD_Get_USB_Status+0x1c>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	0800656d 	.word	0x0800656d
 8006560:	08006573 	.word	0x08006573
 8006564:	08006579 	.word	0x08006579
 8006568:	0800657f 	.word	0x0800657f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	73fb      	strb	r3, [r7, #15]
    break;
 8006570:	e00b      	b.n	800658a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006572:	2303      	movs	r3, #3
 8006574:	73fb      	strb	r3, [r7, #15]
    break;
 8006576:	e008      	b.n	800658a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006578:	2301      	movs	r3, #1
 800657a:	73fb      	strb	r3, [r7, #15]
    break;
 800657c:	e005      	b.n	800658a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800657e:	2303      	movs	r3, #3
 8006580:	73fb      	strb	r3, [r7, #15]
    break;
 8006582:	e002      	b.n	800658a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006584:	2303      	movs	r3, #3
 8006586:	73fb      	strb	r3, [r7, #15]
    break;
 8006588:	bf00      	nop
  }
  return usb_status;
 800658a:	7bfb      	ldrb	r3, [r7, #15]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <__libc_init_array>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	4e0d      	ldr	r6, [pc, #52]	; (80065d0 <__libc_init_array+0x38>)
 800659c:	4c0d      	ldr	r4, [pc, #52]	; (80065d4 <__libc_init_array+0x3c>)
 800659e:	1ba4      	subs	r4, r4, r6
 80065a0:	10a4      	asrs	r4, r4, #2
 80065a2:	2500      	movs	r5, #0
 80065a4:	42a5      	cmp	r5, r4
 80065a6:	d109      	bne.n	80065bc <__libc_init_array+0x24>
 80065a8:	4e0b      	ldr	r6, [pc, #44]	; (80065d8 <__libc_init_array+0x40>)
 80065aa:	4c0c      	ldr	r4, [pc, #48]	; (80065dc <__libc_init_array+0x44>)
 80065ac:	f000 f820 	bl	80065f0 <_init>
 80065b0:	1ba4      	subs	r4, r4, r6
 80065b2:	10a4      	asrs	r4, r4, #2
 80065b4:	2500      	movs	r5, #0
 80065b6:	42a5      	cmp	r5, r4
 80065b8:	d105      	bne.n	80065c6 <__libc_init_array+0x2e>
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065c0:	4798      	blx	r3
 80065c2:	3501      	adds	r5, #1
 80065c4:	e7ee      	b.n	80065a4 <__libc_init_array+0xc>
 80065c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065ca:	4798      	blx	r3
 80065cc:	3501      	adds	r5, #1
 80065ce:	e7f2      	b.n	80065b6 <__libc_init_array+0x1e>
 80065d0:	08006658 	.word	0x08006658
 80065d4:	08006658 	.word	0x08006658
 80065d8:	08006658 	.word	0x08006658
 80065dc:	0800665c 	.word	0x0800665c

080065e0 <memset>:
 80065e0:	4402      	add	r2, r0
 80065e2:	4603      	mov	r3, r0
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d100      	bne.n	80065ea <memset+0xa>
 80065e8:	4770      	bx	lr
 80065ea:	f803 1b01 	strb.w	r1, [r3], #1
 80065ee:	e7f9      	b.n	80065e4 <memset+0x4>

080065f0 <_init>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	bf00      	nop
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr

080065fc <_fini>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr
